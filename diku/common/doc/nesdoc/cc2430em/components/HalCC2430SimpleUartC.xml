<?xml version="1.0" ?><component loc="52:/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/usart/HalCC2430SimpleUartC.nc" nicename="HalCC2430SimpleUartC" qname="HalCC2430SimpleUartC">
      <documentation loc="47:/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/usart/HalCC2430SimpleUartC.nc">
        <short>

 </short>
        <long>

 @author Martin Leopold &lt;leopold@diku.dk&gt;
</long>
      </documentation>
      <configuration/>
      <wiring>
        <wire loc="62:/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/usart/HalCC2430SimpleUartC.nc">
          <from><interface-ref name="Init" ref="0x2af4418badb0" scoped=""/></from>
          <to><interface-ref name="Init" ref="0x2af4418dec90" scoped=""/></to>
        </wire>
        <wire loc="63:/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/usart/HalCC2430SimpleUartC.nc">
          <from><interface-ref name="uart0" ref="0x2af4418df500" scoped=""/></from>
          <to><interface-ref name="uart0" ref="0x2af4418db370" scoped=""/></to>
        </wire>
      </wiring>
    <specification><interface loc="53:/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/usart/HalCC2430SimpleUartC.nc" name="Init" provided="1" ref="0x2af4418badb0">
      <component-ref nicename="HalCC2430SimpleUartC" qname="HalCC2430SimpleUartC"/>
      <type-interface alignment="I:8" size="I:8"><interface-ref name="Init" ref="0x2af4418badb0" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.interfaces.Init" qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" ref="0x2af4418df170" scoped=""/>
      </interface-functions>
    </interface><interface loc="54:/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/usart/HalCC2430SimpleUartC.nc" name="uart0" provided="1" ref="0x2af4418df500">
      <component-ref nicename="HalCC2430SimpleUartC" qname="HalCC2430SimpleUartC"/>
      <type-interface alignment="I:8" size="I:8"><interface-ref name="uart0" ref="0x2af4418df500" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.lib.serial.SerialByteComm" qname="SerialByteComm"/>
      </instance>
      <interface-functions>
        <function-ref name="get" ref="0x2af4418df850" scoped=""/>
        <function-ref name="putDone" ref="0x2af4418df9d8" scoped=""/>
        <function-ref name="put" ref="0x2af4418dfb60" scoped=""/>
      </interface-functions>
    </interface></specification><referenced><interface loc="42:/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/usart/HalCC2430SimpleUartP.nc" name="uart0" provided="1" ref="0x2af4418db370">
      <component-ref nicename="HalCC2430SimpleUartP" qname="HalCC2430SimpleUartP"/>
      <type-interface alignment="I:8" size="I:8"><interface-ref name="uart0" ref="0x2af4418db370" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.lib.serial.SerialByteComm" qname="SerialByteComm"/>
      </instance>
      <interface-functions>
        <function-ref name="get" ref="0x2af4418db6c0" scoped=""/>
        <function-ref name="putDone" ref="0x2af4418db848" scoped=""/>
        <function-ref name="put" ref="0x2af4418db9d0" scoped=""/>
      </interface-functions>
    </interface><interface loc="41:/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/usart/HalCC2430SimpleUartP.nc" name="Init" provided="1" ref="0x2af4418dec90">
      <component-ref nicename="HalCC2430SimpleUartP" qname="HalCC2430SimpleUartP"/>
      <type-interface alignment="I:8" size="I:8"><interface-ref name="Init" ref="0x2af4418dec90" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.interfaces.Init" qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" ref="0x2af4418db020" scoped=""/>
      </interface-functions>
    </interface><component loc="39:/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/usart/HalCC2430SimpleUartP.nc" nicename="HalCC2430SimpleUartP" qname="HalCC2430SimpleUartP">
      <documentation loc="31:/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/ioCC2430.h">
        <short>

 Provide cc2430 specific register maps

 Absolute addressing in Keil is possible in a number of ways:
   Standard C
     (uint8_t xdata*) addr
   Using sfr types/storrage class specifiers
     sfr x = addr
   Using the at modifier
     uint8_t x at addr

 Regarding multibyte values, it seems that ChipCon has chosen the
 follwing semantics that handles latching one or more bytes when
 reading and writing:

  When reading: the _low_ byte must be read first and the high-byte
  is latched for glitch free 16-bit operations

  When writing: the low byte must be written first and the value
  does not take effect before the high byte is written


 </short>
        <long>

 Provide cc2430 specific register maps

 Absolute addressing in Keil is possible in a number of ways:
   Standard C
     (uint8_t xdata*) addr
   Using sfr types/storrage class specifiers
     sfr x = addr
   Using the at modifier
     uint8_t x at addr

 Regarding multibyte values, it seems that ChipCon has chosen the
 follwing semantics that handles latching one or more bytes when
 reading and writing:

  When reading: the _low_ byte must be read first and the high-byte
  is latched for glitch free 16-bit operations

  When writing: the low byte must be written first and the value
  does not take effect before the high byte is written


 @author Martin Leopold &lt;leopold@diku.dk&gt;
</long>
      </documentation>
      <module/>
    </component></referenced></component>