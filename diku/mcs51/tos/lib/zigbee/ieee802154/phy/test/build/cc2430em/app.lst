C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE APP
OBJECT MODULE PLACED IN .\app.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe app.c LARGE PRINT(.\app.lst) OBJECT(.\app.obj) SYMBOLS

line level    source

   1          
   2          #define MANGLED_NESC_APP_C
   3          #define nx_struct struct
   4          #define nx_union union
   5          #define dbg(mode, format) ((void)0)
   6          #define dbg_clear(mode, format) ((void)0)
   7          #define dbg_active(mode) 0
   8          //# 150 "/usr/lib/gcc/x86_64-linux-gnu/4.7/include/stddef.h" 3
   9          typedef long int ptrdiff_t;
  10          //#line 213
  11          typedef long unsigned int size_t;
  12          //#line 325
  13          typedef int wchar_t;
  14          //# 8 "/usr/lib/ncc/deputy_nodeputy.h"
  15          /*struct __nesc_attr_nonnull {
  16          //#line 8
  17            int dummy;
  18          }  ;*/
  19          //#line 9
  20          /*struct __nesc_attr_bnd {
  21          //#line 9
  22            void *lo, *hi;
  23          }  ;*/
  24          //#line 10
  25          /*struct __nesc_attr_bnd_nok {
  26          //#line 10
  27            void *lo, *hi;
  28          }  ;*/
  29          //#line 11
  30          /*struct __nesc_attr_count {
  31          //#line 11
  32            int n;
  33          }  ;*/
  34          //#line 12
  35          /*struct __nesc_attr_count_nok {
  36          //#line 12
  37            int n;
  38          }  ;*/
  39          //#line 13
  40          /*struct __nesc_attr_one {
  41          //#line 13
  42            int dummy;
  43          }  ;*/
  44          //#line 14
  45          /*struct __nesc_attr_one_nok {
  46          //#line 14
  47            int dummy;
  48          }  ;*/
  49          //#line 15
  50          /*struct __nesc_attr_dmemset {
  51          //#line 15
  52            int a1, a2, a3;
  53          }  ;*/
  54          //#line 16
  55          /*struct __nesc_attr_dmemcpy {
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 2   

  56          //#line 16
  57            int a1, a2, a3;
  58          }  ;*/
  59          //#line 17
  60          /*struct __nesc_attr_nts {
  61          //#line 17
  62            int dummy;
  63          }  ;*/
  64          //# 47 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/mcs51/keil_stdint.h" 3
  65          typedef signed char int8_t;
  66          typedef short int16_t;
  67          
  68          
  69          
  70          typedef long int32_t;
  71          
  72          
  73          /*typedef long long int int64_t;*/
  74          
  75          
  76          
  77          
  78          typedef unsigned char uint8_t;
  79          typedef unsigned short uint16_t;
  80          
  81          
  82          
  83          typedef unsigned long uint32_t;
  84          
  85          
  86          /*typedef unsigned long long int uint64_t;*/
  87          //# 42 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/mcs51/stdint.h" 3
  88          typedef signed char int_least8_t;
  89          typedef short int int_least16_t;
  90          typedef long int_least32_t;
  91          
  92          
  93          
  94          
  95          
  96          
  97          
  98          
  99          
 100          typedef unsigned char uint_least8_t;
 101          typedef unsigned short uint_least16_t;
 102          typedef unsigned long uint_least32_t;
 103          //#line 70
 104          typedef signed char int_fast8_t;
 105          
 106          
 107          
 108          
 109          
 110          typedef int int_fast16_t;
 111          typedef int int_fast32_t;
 112          
 113          
 114          
 115          
 116          
 117          typedef unsigned char uint_fast8_t;
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 3   

 118          
 119          
 120          
 121          
 122          
 123          typedef unsigned int uint_fast16_t;
 124          typedef unsigned int uint_fast32_t;
 125          //#line 105
 126          typedef int intptr_t;
 127          
 128          
 129          typedef unsigned int uintptr_t;
 130          
 131          
 132          
 133          
 134          
 135          
 136          
 137          
 138          /*__extension__*/ 
 139          typedef
 140                   float* intmax_t;
 141                
 142          /*__extension__*/ 
 143          typedef 
 144                   float* uintmax_t;
 145                
 146          //# 35 "/usr/include/inttypes.h" 3
 147          typedef int __gwchar_t;
 148          //#line 283
 149          //#line 279
 150          typedef struct __nesc_unnamed4242 {
 151          
 152            long int quot;
 153            long int rem;
 154          } imaxdiv_t;
 155          //# 431 "/usr/lib/ncc/nesc_nx.h"
 156          typedef struct { unsigned char nxdata[1]; } /*__attribute__((packed))*/ nx_int8_t;typedef int8_t __nesc_nx
             -base_nx_int8_t  ;
 157          typedef struct { unsigned char nxdata[2]; } /*__attribute__((packed))*/ nx_int16_t;typedef int16_t __nesc_
             -nxbase_nx_int16_t  ;
 158          typedef struct { unsigned char nxdata[8]; } /*__attribute__((packed))*/ nx_int32_t;typedef int32_t __nesc_
             -nxbase_nx_int32_t  ;
 159          typedef struct { unsigned char nxdata[8]; } /*__attribute__((packed))*/ nx_int64_t;/*typedef int64_t __nes
             -c_nxbase_nx_int64_t  ;*/
 160          typedef struct { unsigned char nxdata[1]; } /*__attribute__((packed))*/ nx_uint8_t;typedef uint8_t __nesc_
             -nxbase_nx_uint8_t  ;
 161          typedef struct { unsigned char nxdata[2]; } /*__attribute__((packed))*/ nx_uint16_t;typedef uint16_t __nes
             -c_nxbase_nx_uint16_t  ;
 162          typedef struct { unsigned char nxdata[8]; } /*__attribute__((packed))*/ nx_uint32_t;typedef uint32_t __nes
             -c_nxbase_nx_uint32_t  ;
 163          typedef struct { unsigned char nxdata[8]; } /*__attribute__((packed))*/ nx_uint64_t;/*typedef uint64_t __n
             -esc_nxbase_nx_uint64_t  ;*/
 164          
 165          
 166          typedef struct { unsigned char nxdata[1]; } /*__attribute__((packed))*/ nxle_int8_t;typedef int8_t __nesc_
             -nxbase_nxle_int8_t  ;
 167          typedef struct { unsigned char nxdata[2]; } /*__attribute__((packed))*/ nxle_int16_t;typedef int16_t __nes
             -c_nxbase_nxle_int16_t  ;
 168          typedef struct { unsigned char nxdata[8]; } /*__attribute__((packed))*/ nxle_int32_t;typedef int32_t __nes
             -c_nxbase_nxle_int32_t  ;
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 4   

 169          typedef struct { unsigned char nxdata[8]; } /*__attribute__((packed))*/ nxle_int64_t;/*typedef int64_t __n
             -esc_nxbase_nxle_int64_t  ;*/
 170          typedef struct { unsigned char nxdata[1]; } /*__attribute__((packed))*/ nxle_uint8_t;typedef uint8_t __nes
             -c_nxbase_nxle_uint8_t  ;
 171          typedef struct { unsigned char nxdata[2]; } /*__attribute__((packed))*/ nxle_uint16_t;typedef uint16_t __n
             -esc_nxbase_nxle_uint16_t  ;
 172          typedef struct { unsigned char nxdata[8]; } /*__attribute__((packed))*/ nxle_uint32_t;typedef uint32_t __n
             -esc_nxbase_nxle_uint32_t  ;
 173          typedef struct { unsigned char nxdata[8]; } /*__attribute__((packed))*/ nxle_uint64_t;/*typedef uint64_t _
             -_nesc_nxbase_nxle_uint64_t  ;*/
 174          //# 13 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/mcs51/string.h"
 175          extern void *memset(void *s, char val, int n);
 176          //# 67 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
 177          union wait {
 178          
 179            int w_status;
 180            struct __nesc_unnamed4243 {
 181          
 182          
 183              unsigned int __w_termsig : 7;
 184              unsigned int __w_coredump : 1;
 185              unsigned int __w_retcode : 8;
 186              unsigned int  : 16;
 187            } 
 188          
 189          
 190          
 191          
 192          
 193          
 194            __wait_terminated;
 195            struct __nesc_unnamed4244 {
 196          
 197          
 198              unsigned int __w_stopval : 8;
 199              unsigned int __w_stopsig : 8;
 200              unsigned int  : 16;
 201            } 
 202          
 203          
 204          
 205          
 206          
 207            __wait_stopped;
 208          };
 209          //# 72 "/usr/include/stdlib.h" 3
 210          //#line 68
 211          typedef union __nesc_unnamed4245 {
 212          
 213            union wait *__uptr;
 214            int *__iptr;
 215          } __WAIT_STATUS /*__attribute((__transparent_union__))*/ ;
 216          //#line 102
 217          //#line 98
 218          typedef struct __nesc_unnamed4246 {
 219          
 220            int quot;
 221            int rem;
 222          } div_t;
 223          
 224          
 225          
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 5   

 226          
 227          
 228          
 229          
 230          //#line 106
 231          typedef struct __nesc_unnamed4247 {
 232          
 233            long int quot;
 234            long int rem;
 235          } ldiv_t;
 236          
 237          
 238          
 239          
 240          
 241          
 242          
 243          /*__extension__*/ 
 244          
 245          
 246          
 247          //#line 118
 248          typedef struct __nesc_unnamed4248 {
 249          
 250          
 251                   float* quot;
 252                
 253          
 254                   float* rem;
 255                
 256          } lldiv_t;
 257          //#line 158
 258          /*__extension__*/ 
 259          //#line 195
 260          /*__extension__*/ 
 261          
 262          
 263          
 264          
 265          /*__extension__*/ 
 266          
 267          
 268          
 269          
 270          
 271          
 272          
 273          
 274          /*__extension__*/ 
 275          
 276          
 277          
 278          
 279          /*__extension__*/ 
 280          //#line 349
 281          struct random__data {
 282          
 283            int32_t *fptr;
 284            int32_t *rptr;
 285            int32_t *state;
 286            int rand_type;
 287            int rand_deg;
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 6   

 288            int rand_sep;
 289            int32_t *end_ptr;
 290          };
 291          //#line 418
 292          struct drand48__data {
 293          
 294            unsigned short int __x[3];
 295            unsigned short int __old_x[3];
 296            unsigned short int __c;
 297            unsigned short int __init;
 298            
 299                   float* __a;
 300                
 301          };
 302          //#line 742
 303          typedef int (*__compar_fn_t)(const void *arg_0x2ab5a41f31f0, const void *arg_0x2ab5a41f34c8);
 304          //#line 776
 305          /*__extension__*/ 
 306          //#line 793
 307          /*__extension__*/ 
 308          //# 24 "/opt/tinyos-2.x-contrib/diku/common/tos/system/tos.h"
 309          typedef uint8_t bool  ;
 310          enum __nesc_unnamed4249 {
 311          //#line 25
 312            FALSE = 0, TRUE = 1
 313          };
 314          
 315          
 316          
 317          
 318          
 319          
 320          
 321          
 322          
 323          typedef nx_int8_t nx_bool;
 324          uint16_t TOS_NODE_ID = 1;
 325          
 326          
 327          
 328          
 329          
 330          /*struct __nesc_attr_atmostonce {
 331          };*/
 332          //#line 44
 333          /*struct __nesc_attr_atleastonce {
 334          };*/
 335          //#line 45
 336          /*struct __nesc_attr_exactlyonce {
 337          };*/
 338          //# 51 "/opt/tinyos-2.1.2/tos/types/TinyError.h"
 339          enum __nesc_unnamed4250 {
 340            SUCCESS = 0, 
 341            FAIL = 1, 
 342            ESIZE = 2, 
 343            ECANCEL = 3, 
 344            EOFF = 4, 
 345            EBUSY = 5, 
 346            EINVAL = 6, 
 347            ERETRY = 7, 
 348            ERESERVE = 8, 
 349            EALREADY = 9, 
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 7   

 350            ENOMEM = 10, 
 351            ENOACK = 11, 
 352            ELAST = 11
 353          };
 354          
 355          typedef uint8_t error_t  ;
 356          
 357          static  /*inline*/  error_t ecombine(error_t r1, error_t r2)  ;
 358          //# 160 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/mcs51/io8051.h"
 359          sbit EA = 0xAF;
 360          //#line 194
 361          sbit P1_0 = 0x90;
 362          sbit P1_1 = 0x91;
 363          //# 67 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/ioCC2430.h"
 364          enum __nesc_unnamed4251 {
 365            CC2430_IEN0_EA = 0x7, 
 366            CC2430_IEN0_STIE = 0x5, 
 367            CC2430_IEN0_ENCIE = 0x4, 
 368            CC2430_IEN0_URX1IE = 0x3, 
 369            CC2430_IEN0_URX0IE = 0x2, 
 370            CC2430_IEN0_ADCIE = 0x1, 
 371            CC2430_IEN0_RFERRIE = 0x0
 372          };
 373          
 374          
 375          
 376          
 377          
 378          enum __nesc_unnamed4252 {
 379            CC2430_IEN2_WDTIE = 0x5, 
 380            CC2430_IEN2_P1IE = 0x4, 
 381            CC2430_IEN2_UTX1IE = 0x3, 
 382            CC2430_IEN2_UTX0IE = 0x2, 
 383            CC2430_IEN2_P2IE = 0x1, 
 384            CC2430_IEN2_RFIE = 0x0
 385          };
 386          
 387          
 388          
 389          
 390          
 391          enum __nesc_unnamed4253 {
 392            CC2430_IRCON_STIF = 0x7, 
 393            CC2430_IRCON_P0IF = 0x5, 
 394            CC2430_IRCON_T4IF = 0x4, 
 395            CC2430_IRCON_T3IF = 0x3, 
 396            CC2430_IRCON_T2IF = 0x2, 
 397            CC2430_IRCON_T1IF = 0x1, 
 398            CC2430_IRCON_DMAIF = 0x0
 399          };
 400          
 401          
 402          
 403          
 404          
 405          enum __nesc_unnamed4254 {
 406            CC2430_IRCON2_WDTIF = 0x4, 
 407            CC2430_IRCON2_P1IF = 0x3, 
 408            CC2430_IRCON2_UTX1IF = 0x2, 
 409            CC2430_IRCON2_UTX0IF = 0x1, 
 410            CC2430_IRCON2_P2IF = 0x0
 411          };
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 8   

 412          
 413          
 414          
 415          
 416          
 417          enum __nesc_unnamed4255 {
 418            CC2430_RFIM_RREG_PD = 0x7, 
 419            CC2430_RFIM_TXDONE = 0x6, 
 420            CC2430_RFIM_FIFOP = 0x5, 
 421            CC2430_RFIM_SFD = 0x4, 
 422            CC2430_RFIM_CCA = 0x3, 
 423            CC2430_RFIM_CSP_WT = 0x2, 
 424            CC2430_RFIM_CSP_STOP = 0x1, 
 425            CC2430_RFIM_CSP_INT = 0x0
 426          };
 427          
 428          
 429          
 430          
 431          
 432          enum __nesc_unnamed4256 {
 433            CC2430_RFIF_RREG_ON = 0x7, 
 434            CC2430_RFIF_TXDONE = 0x6, 
 435            CC2430_RFIF_FIFOP = 0x5, 
 436            CC2430_RFIF_SFD = 0x4, 
 437            CC2430_RFIF_CCA = 0x3, 
 438            CC2430_RFIF_CSP_WT = 0x2, 
 439            CC2430_RFIF_CSP_STOP = 0x1, 
 440            CC2430_RFIF_CSP_INT = 0x0
 441          };
 442          //#line 168
 443          sfr U0CSR = 0x86;
 444          //#line 183
 445          sbit URX0IF = 0x8B;
 446          
 447          sbit RFERRIF = 0x89;
 448          
 449          
 450          
 451          
 452          sfr RFIM = 0x91;
 453          
 454          
 455          
 456          
 457          
 458          
 459          
 460          
 461          
 462          sfr IEN2 = 0x9A;
 463          sfr S1CON = 0x9B;
 464          //#line 217
 465          sbit RFERRIE = 0xA8;
 466          
 467          sbit URX0IE = 0xAA;
 468          //#line 256
 469          sfr SLEEP = 0xBE;
 470          
 471          
 472          sfr U0BUF = 0xC1;
 473          sfr U0BAUD = 0xC2;
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 9   

 474          
 475          sfr U0UCR = 0xC4;
 476          sfr U0GCR = 0xC5;
 477          sfr CLKCON = 0xC6;
 478          //#line 289
 479          sfr RFD = 0xD9;
 480          //#line 308
 481          sfr RFST = 0xE1;
 482          
 483          sfr T1CNTL = 0xE2;
 484          sfr T1CNTH = 0xE3;
 485          //#line 334
 486          sbit UTX0IF = 0xE9;
 487          
 488          
 489          
 490          sfr RFIF = 0xE9;
 491          
 492          
 493          
 494          
 495          
 496          
 497          
 498          
 499          sfr PERCFG = 0xF1;
 500          
 501          
 502          
 503          
 504          sfr P1_DIR = 0xFE;
 505          
 506          
 507          
 508          sfr P0_ALT = 0xF3;
 509          //#line 393
 510          //typedef uint16_t uint16_t xdata;
 511          //typedef uint8_t uint8_t xdata;
 512          
 513          //typedef uint16_t uint16_t code;
 514          //typedef uint8_t uint8_t code;
 515          //#line 479
 516          enum __nesc_unnamed4257 {
 517            CC2430_RFPWR_ADI_RADIO_PD = 0x4, 
 518            CC2430_RFPWR_RREG_RADIO_PD = 0x3, 
 519            CC2430_RFPWR_RREG_DELAY = 0x0, 
 520            CC2430_RFPWR_RREG_DELAY_MASK = 0x7
 521          };
 522          
 523          enum __nesc_unnamed4258 {
 524            CC2430_RREG_DELAY_0 = 0x0, 
 525            CC2430_RREG_DELAY_31 = 0x1, 
 526            CC2430_RREG_DELAY_63 = 0x2, 
 527            CC2430_RREG_DELAY_125 = 0x3, 
 528            CC2430_RREG_DELAY_250 = 0x4, 
 529            CC2430_RREG_DELAY_500 = 0x5, 
 530            CC2430_RREG_DELAY_1000 = 0x6, 
 531            CC2430_RREG_DELAY_2000 = 0x7
 532          };
 533          
 534          enum __nesc_unnamed4259 {
 535            CC2430_MDMCTRL0L_AUTOCRC = 0x5, 
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 10  

 536            CC2430_MDMCTRL0L_AUTOACK = 0x4
 537          };
 538          
 539          enum __nesc_unnamed4260 {
 540            CC2430_MDMCTRL0H_FRAME_FILT = 0x6, 
 541            CC2430_MDMCTRL0H_RESERVED_FRAME_MODE = 0x5, 
 542            CC2430_MDMCTRL0H_PAN_COORDINATOR = 0x4, 
 543            CC2430_MDMCTRL0H_ADDR_DECODE = 0x3, 
 544            CC2430_MDMCTRL0H_CCA_HYST = 0x0
 545          };
 546          
 547          enum __nesc_unnamed4261 {
 548            CC2430_RFSTATUS_TX_ACTIVE = 0x4, 
 549            CC2430_RFSTATUS_FIFO = 0x3, 
 550            CC2430_RFSTATUS_FIFOP = 0x2, 
 551            CC2430_RFSTATUS_SFD = 0x1, 
 552            CC2430_RFSTATUS_CCA = 0x0
 553          };
 554          //# 102 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/mcs51/mcs51hardware.h"
 555          typedef uint8_t __nesc_atomic_t;
 556          
 557          static   /*inline*/   void __nesc_disable_interrupt();
 558          static   /*inline*/   void __nesc_enable_interrupt();
 559          
 560            /*inline*/   __nesc_atomic_t __nesc_atomic_start(void )  ;
 561          
 562          
 563          
 564          
 565          
 566            /*inline*/   void __nesc_atomic_end(__nesc_atomic_t oldSreg)  ;
 567          //# 71 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/timer/CC2430Timer.h"
 568          enum __nesc_unnamed4262 {
 569            CC2430_SLEEP_OSC32K_CALDIS = 7, 
 570            CC2430_SLEEP_XOSC_STB = 6, 
 571            CC2430_SLEEP_HFRC_STB = 5, 
 572            CC2430_SLEEP_DIV = 3, 
 573            CC2430_SLEEP_OSC_PD = 2, 
 574            CC2430_SLEEP_MODE = 0, 
 575            CC2430_SLEEP_MODE_MASK = 3
 576          };
 577          
 578          enum __nesc_unnamed4263 {
 579            CC2430_SLEEP_POWERMODE_0 = 0, 
 580            CC2430_SLEEP_POWERMODE_1 = 1, 
 581            CC2430_SLEEP_POWERMODE_2 = 2, 
 582            CC2430_SLEEP_POWERMODE_3 = 3
 583          };
 584          
 585          enum __nesc_unnamed4264 {
 586            CC2430_CLKCON_OSC32K = 7, 
 587            CC2430_CLKCON_OSC = 6, 
 588            CC2430_CLKCON_TICKSPD = 3, 
 589            CC2430_CLKCON_CLKSPD = 0, 
 590            CC2430_CLKCON_TICKSPD_MASK = 0x38
 591          };
 592          
 593          
 594          
 595          
 596          enum cc2430_tick_spd_t {
 597            CC2430_TICKF_DIV_1 = 0x0 << CC2430_CLKCON_TICKSPD, 
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 11  

 598            CC2430_TICKF_DIV_2 = 0x1 << CC2430_CLKCON_TICKSPD, 
 599            CC2430_TICKF_DIV_4 = 0x2 << CC2430_CLKCON_TICKSPD, 
 600            CC2430_TICKF_DIV_8 = 0x3 << CC2430_CLKCON_TICKSPD, 
 601            CC2430_TICKF_DIV_16 = 0x4 << CC2430_CLKCON_TICKSPD, 
 602            CC2430_TICKF_DIV_32 = 0x5 << CC2430_CLKCON_TICKSPD, 
 603            CC2430_TICKF_DIV_64 = 0x6 << CC2430_CLKCON_TICKSPD, 
 604            CC2430_TICKF_DIV_128 = 0x7 << CC2430_CLKCON_TICKSPD
 605          };
 606          
 607          
 608          
 609          
 610          
 611          
 612          
 613          
 614          
 615          
 616          enum __nesc_unnamed4265 {
 617            CC2430_T1CTL_CH2IF = 0x7, 
 618            CC2430_T1CTL_CH1IF = 0x6, 
 619            CC2430_T1CTL_CH0IF = 0x5, 
 620            CC2430_T1CTL_OVFIF = 0x4, 
 621            CC2430_T1CTL_DIV = 0x2, 
 622            CC2430_T1CTL_MODE = 0x0, 
 623            CC2430_T1CTL_MODE_MASK = 0x3, 
 624            CC2430_T1CTL_DIV_MASK = 0xc, 
 625            CC2430_T1CTL_IF_MASK = 0xf0
 626          };
 627          
 628          
 629          
 630          
 631          
 632          
 633          enum cc2430_timer1_mode_t {
 634            CC2430_TIMER1_MODE_OFF = 0x0 << CC2430_T1CTL_MODE, 
 635            CC2430_TIMER1_MODE_FREE = 0x1 << CC2430_T1CTL_MODE, 
 636            CC2430_TIMER1_MODE_MODULO = 0x2 << CC2430_T1CTL_MODE, 
 637            CC2430_TIMER1_MODE_UPDOWN = 0x3 << CC2430_T1CTL_MODE
 638          };
 639          
 640          
 641          
 642          
 643          
 644          
 645          enum cc2430_timer1_if_t {
 646            CC2430_T1_CH2IF = 1 << CC2430_T1CTL_CH2IF, 
 647            CC2430_T1_CH1IF = 1 << CC2430_T1CTL_CH1IF, 
 648            CC2430_T1_CH0IF = 1 << CC2430_T1CTL_CH0IF, 
 649            CC2430_T1_OVFIF = 1 << CC2430_T1CTL_OVFIF
 650          };
 651          
 652          
 653          
 654          
 655          
 656          enum cc2430_timer1_prescaler_t {
 657            CC2430_TIMER1_DIV_1 = 0x0 << CC2430_T1CTL_DIV, 
 658            CC2430_TIMER1_DIV_8 = 0x1 << CC2430_T1CTL_DIV, 
 659            CC2430_TIMER1_DIV_32 = 0x2 << CC2430_T1CTL_DIV, 
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 12  

 660            CC2430_TIMER1_DIV_128 = 0x3 << CC2430_T1CTL_DIV
 661          };
 662          
 663          
 664          
 665          
 666          
 667          enum __nesc_unnamed4266 {
 668            CC2430_T1CCTLx_CPSEL = 0x7, 
 669            CC2430_T1CCTLx_IM = 0x6, 
 670            CC2430_T1CCTLx_CMP = 0x3, 
 671            CC2430_T1CCTLx_MODE = 0x2, 
 672            CC2430_T1CCTLx_CAP = 0x0
 673          };
 674          
 675          
 676          
 677          
 678          
 679          
 680          
 681          
 682          
 683          
 684          enum cc2430_timerMAC_mode_t {
 685            CC2430_TIMERMAC_MODE_IDLE = 0x0, 
 686            CC2430_TIMERMAC_MODE_RUN = 0x1
 687          };
 688          
 689          
 690          
 691          
 692          
 693          enum cc2430_timerMAC_T2CNF_t {
 694            CC2430_T2CNF_CMPIF = 0x7, 
 695            CC2430_T2CNF_PERIF = 0x6, 
 696            CC2430_T2CNF_OFCMPIF = 0x5, 
 697            CC2430_T2CNF_CMSEL = 0x3, 
 698            CC2430_T2CNF_SYNC = 0x1, 
 699            CC2430_T2CNF_RUN = 0x0
 700          };
 701          
 702          
 703          
 704          
 705          
 706          
 707          enum cc2430_timerMAC_T2PEROF2_t {
 708            CC2430_T2PEROF2_CMPIM = 0x7, 
 709            CC2430_T2PEROF2_PERIM = 0x6, 
 710            CC2430_T2PEROF2_OFCMPIM = 0x5
 711          };
 712          
 713          enum cc2430_timerMAC_if_t {
 714            CC2430_TMAC_CMPIF = 1 << CC2430_T2CNF_CMPIF, 
 715            CC2430_TMAC_PERIF = 1 << CC2430_T2CNF_PERIF, 
 716            CC2430_TMAC_OFCMPIF = 1 << CC2430_T2CNF_OFCMPIF
 717          };
 718          
 719          enum cc2430_timerMAC_interval_t {
 720            CC2430_TIMERWDT_32768 = 0, 
 721            CC2430_TIMERWDT_8192 = 1, 
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 13  

 722            CC2430_TIMERWDT_512 = 2, 
 723            CC2430_TIMERWDT_64 = 3
 724          };
 725          //#line 240
 726          enum __nesc_unnamed4267 {
 727            CC2430_TIMIF_OVFIM = 0x6
 728          };
 729          
 730          enum cc2430_timer34_if_t {
 731            CC2430_TIMIF_T4CH1IF = 0x5, 
 732            CC2430_TIMIF_T4CH0IF = 0x4, 
 733            CC2430_TIMIF_T4OVFIF = 0x3, 
 734            CC2430_TIMIF_T3CH1IF = 0x2, 
 735            CC2430_TIMIF_T3CH0IF = 0x1, 
 736            CC2430_TIMIF_T3OVFIF = 0x0
 737          };
 738          
 739          
 740          
 741          
 742          
 743          
 744          enum cc2430_timer3_4_mode_t {
 745            CC2430_TIMER3_4_MODE_FREE = 0x0, 
 746            CC2430_TIMER3_4_MODE_DOWN = 0x1, 
 747            CC2430_TIMER3_4_MODE_MODULO = 0x2, 
 748            CC2430_TIMER3_4_MODE_UPDOWN = 0x3
 749          };
 750          
 751          
 752          
 753          
 754          
 755          enum __nesc_unnamed4268 {
 756            CC2430_T34CTL_DIV = 0x5, 
 757            CC2430_T34CTL_START = 0x4, 
 758            CC2430_T34CTL_OVFIM = 0x3, 
 759            CC2430_T34CTL_WDTIF = 0x3, 
 760            CC2430_T34CTL_CLR = 0x2, 
 761            CC2430_T34CTL_MODE = 0x0, 
 762            CC2430_T34CTL_MODE_MASK = 0x3, 
 763            CC2430_T34CTL_DIV_MASK = 0xe0
 764          };
 765          
 766          
 767          
 768          
 769          
 770          enum cc2430_timer3_4_prescaler_t {
 771            CC2430_TIMER3_4_DIV_1 = 0x0 << CC2430_T34CTL_DIV, 
 772            CC2430_TIMER3_4_DIV_2 = 0x1 << CC2430_T34CTL_DIV, 
 773            CC2430_TIMER3_4_DIV_4 = 0x2 << CC2430_T34CTL_DIV, 
 774            CC2430_TIMER3_4_DIV_8 = 0x3 << CC2430_T34CTL_DIV, 
 775            CC2430_TIMER3_4_DIV_16 = 0x4 << CC2430_T34CTL_DIV, 
 776            CC2430_TIMER3_4_DIV_32 = 0x5 << CC2430_T34CTL_DIV, 
 777            CC2430_TIMER3_4_DIV_64 = 0x6 << CC2430_T34CTL_DIV, 
 778            CC2430_TIMER3_4_DIV_128 = 0x7 << CC2430_T34CTL_DIV
 779          };
 780          
 781          
 782          
 783          
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 14  

 784          
 785          
 786          
 787          
 788          
 789          
 790          enum __nesc_unnamed4269 {
 791            CC2430_WDCTL_CLR = 0x4, 
 792            CC2430_WDCTL_EN = 0x3, 
 793            CC2430_WDCTL_MODE = 0x2, 
 794            CC2430_WDCTL_INT = 0x0, 
 795            CC2430_WDCTL_INT_MASK = 0x3
 796          };
 797          
 798          enum cc2430_timerWDT_mode_t {
 799            CC2430_TIMERWDT_MODE_WDT = 0x0 << CC2430_WDCTL_MODE, 
 800            CC2430_TIMERWDT_MODE_TIMER = 0x1 << CC2430_WDCTL_MODE
 801          };
 802          //# 42 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/mcs51/Timer.h"
 803          typedef uint8_t TMilli;
 804          typedef uint8_t T32khz;
 805          typedef uint8_t TMicro;
 806          //# 40 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/cc2420/CC2420.h"
 807          typedef uint8_t cc2420_status_t;
 808          
 809          
 810          
 811          
 812          
 813          
 814          
 815          
 816          
 817          //#line 42
 818          typedef nx_struct cc2420_header_t {
 819            nxle_uint8_t length;
 820            nxle_uint16_t fcf;
 821            nxle_uint8_t dsn;
 822            nxle_uint16_t destpan;
 823            nxle_uint16_t dest;
 824            nxle_uint16_t src;
 825            nxle_uint8_t type;
 826          } /*__attribute__((packed))*/ cc2420_header_t;
 827          
 828          
 829          
 830          
 831          //#line 52
 832          typedef nx_struct cc2420_footer_t {
 833          
 834            nxle_uint8_t i;
 835          } /*__attribute__((packed))*/ cc2420_footer_t;
 836          
 837          
 838          
 839          
 840          
 841          
 842          
 843          
 844          //#line 57
 845          typedef nx_struct cc2420_meta_data_t {
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 15  

 846            nx_uint8_t tx_power;
 847            nx_uint8_t rssi;
 848            nx_uint8_t lqi;
 849            nx_bool crc;
 850            nx_bool ack;
 851            nx_uint16_t time;
 852          } /*__attribute__((packed))*/ cc2420_meta_data_t;
 853          
 854          
 855          
 856          
 857          
 858          //#line 66
 859          typedef nx_struct cc2420_packet_t {
 860            cc2420_header_t packet;
 861          
 862            nx_uint8_t _data[42];
 863          } /*__attribute__((packed))*/ cc2420_packet_t;
 864          //#line 84
 865          enum __nesc_unnamed4270 {
 866          
 867            MAC_HEADER_SIZE = sizeof(cc2420_header_t ) - 1, 
 868          
 869            MAC_FOOTER_SIZE = sizeof(uint16_t ), 
 870          
 871            MAC_PACKET_SIZE = MAC_HEADER_SIZE + 28 + MAC_FOOTER_SIZE
 872          };
 873          
 874          enum cc2420_enums {
 875            CC2420_TIME_ACK_TURNAROUND = 7, 
 876            CC2420_TIME_VREN = 20, 
 877            CC2420_TIME_SYMBOL = 2, 
 878            CC2420_BACKOFF_PERIOD = 20 / CC2420_TIME_SYMBOL, 
 879            CC2420_ACK_WAIT_DELAY = 128
 880          };
 881          
 882          enum cc2420_status_enums {
 883            CC2420_STATUS_RSSI_VALID = 1 << 1, 
 884            CC2420_STATUS_LOCK = 1 << 2, 
 885            CC2420_STATUS_TX_ACTIVE = 1 << 3, 
 886            CC2420_STATUS_ENC_BUSY = 1 << 4, 
 887            CC2420_STATUS_TX_UNDERFLOW = 1 << 5, 
 888            CC2420_STATUS_XOSC16M_STABLE = 1 << 6
 889          };
 890          
 891          enum cc2420_config_reg_enums {
 892            CC2420_SNOP = 0x00, 
 893            CC2420_SXOSCON = 0x01, 
 894            CC2420_STXCAL = 0x02, 
 895            CC2420_SRXON = 0x03, 
 896            CC2420_STXON = 0x04, 
 897            CC2420_STXONCCA = 0x05, 
 898            CC2420_SRFOFF = 0x06, 
 899            CC2420_SXOSCOFF = 0x07, 
 900            CC2420_SFLUSHRX = 0x08, 
 901            CC2420_SFLUSHTX = 0x09, 
 902            CC2420_SACK = 0x0a, 
 903            CC2420_SACKPEND = 0x0b, 
 904            CC2420_SRXDEC = 0x0c, 
 905            CC2420_SRXENC = 0x0d, 
 906            CC2420_SAES = 0x0e, 
 907            CC2420_MAIN = 0x10, 
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 16  

 908            CC2420_MDMCTRL0 = 0x11, 
 909            CC2420_MDMCTRL1 = 0x12, 
 910            CC2420_RSSI = 0x13, 
 911            CC2420_SYNCWORD = 0x14, 
 912            CC2420_TXCTRL = 0x15, 
 913            CC2420_RXCTRL0 = 0x16, 
 914            CC2420_RXCTRL1 = 0x17, 
 915            CC2420_FSCTRL = 0x18, 
 916            CC2420_SECCTRL0 = 0x19, 
 917            CC2420_SECCTRL1 = 0x1a, 
 918            CC2420_BATTMON = 0x1b, 
 919            CC2420_IOCFG0 = 0x1c, 
 920            CC2420_IOCFG1 = 0x1d, 
 921            CC2420_MANFIDL = 0x1e, 
 922            CC2420_MANFIDH = 0x1f, 
 923            CC2420_FSMTC = 0x20, 
 924            CC2420_MANAND = 0x21, 
 925            CC2420_MANOR = 0x22, 
 926            CC2420_AGCCTRL = 0x23, 
 927            CC2420_AGCTST0 = 0x24, 
 928            CC2420_AGCTST1 = 0x25, 
 929            CC2420_AGCTST2 = 0x26, 
 930            CC2420_FSTST0 = 0x27, 
 931            CC2420_FSTST1 = 0x28, 
 932            CC2420_FSTST2 = 0x29, 
 933            CC2420_FSTST3 = 0x2a, 
 934            CC2420_RXBPFTST = 0x2b, 
 935            CC2420_FMSTATE = 0x2c, 
 936            CC2420_ADCTST = 0x2d, 
 937            CC2420_DACTST = 0x2e, 
 938            CC2420_TOPTST = 0x2f, 
 939            CC2420_TXFIFO = 0x3e, 
 940            CC2420_RXFIFO = 0x3f
 941          };
 942          
 943          enum cc2420_ram_addr_enums {
 944            CC2420_RAM_TXFIFO = 0x000, 
 945            CC2420_RAM_RXFIFO = 0x080, 
 946            CC2420_RAM_KEY0 = 0x100, 
 947            CC2420_RAM_RXNONCE = 0x110, 
 948            CC2420_RAM_SABUF = 0x120, 
 949            CC2420_RAM_KEY1 = 0x130, 
 950            CC2420_RAM_TXNONCE = 0x140, 
 951            CC2420_RAM_CBCSTATE = 0x150, 
 952            CC2420_RAM_IEEEADR = 0x160, 
 953            CC2420_RAM_PANID = 0x168, 
 954            CC2420_RAM_SHORTADR = 0x16a
 955          };
 956          
 957          enum cc2420_nonce_enums {
 958            CC2420_NONCE_BLOCK_COUNTER = 0, 
 959            CC2420_NONCE_KEY_SEQ_COUNTER = 2, 
 960            CC2420_NONCE_FRAME_COUNTER = 3, 
 961            CC2420_NONCE_SOURCE_ADDRESS = 7, 
 962            CC2420_NONCE_FLAGS = 15
 963          };
 964          
 965          enum cc2420_main_enums {
 966            CC2420_MAIN_RESETn = 15, 
 967            CC2420_MAIN_ENC_RESETn = 14, 
 968            CC2420_MAIN_DEMOD_RESETn = 13, 
 969            CC2420_MAIN_MOD_RESETn = 12, 
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 17  

 970            CC2420_MAIN_FS_RESETn = 11, 
 971            CC2420_MAIN_XOSC16M_BYPASS = 0
 972          };
 973          
 974          enum cc2420_mdmctrl0_enums {
 975            CC2420_MDMCTRL0_RESERVED_FRAME_MODE = 13, 
 976            CC2420_MDMCTRL0_PAN_COORDINATOR = 12, 
 977            CC2420_MDMCTRL0_ADR_DECODE = 11, 
 978            CC2420_MDMCTRL0_CCA_HYST = 8, 
 979            CC2420_MDMCTRL0_CCA_MOD = 6, 
 980            CC2420_MDMCTRL0_AUTOCRC = 5, 
 981            CC2420_MDMCTRL0_AUTOACK = 4, 
 982            CC2420_MDMCTRL0_PREAMBLE_LENGTH = 0
 983          };
 984          
 985          enum cc2420_mdmctrl1_enums {
 986            CC2420_MDMCTRL1_CORR_THR = 6, 
 987            CC2420_MDMCTRL1_DEMOD_AVG_MODE = 5, 
 988            CC2420_MDMCTRL1_MODULATION_MODE = 4, 
 989            CC2420_MDMCTRL1_TX_MODE = 2, 
 990            CC2420_MDMCTRL1_RX_MODE = 0
 991          };
 992          
 993          enum cc2420_rssi_enums {
 994            CC2420_RSSI_CCA_THR = 8, 
 995            CC2420_RSSI_RSSI_VAL = 0
 996          };
 997          
 998          enum cc2420_syncword_enums {
 999            CC2420_SYNCWORD_SYNCWORD = 0
1000          };
1001          
1002          enum cc2420_txctrl_enums {
1003            CC2420_TXCTRL_TXMIXBUF_CUR = 14, 
1004            CC2420_TXCTRL_TX_TURNAROUND = 13, 
1005            CC2420_TXCTRL_TXMIX_CAP_ARRAY = 11, 
1006            CC2420_TXCTRL_TXMIX_CURRENT = 9, 
1007            CC2420_TXCTRL_PA_CURRENT = 6, 
1008            CC2420_TXCTRL_RESERVED = 5, 
1009            CC2420_TXCTRL_PA_LEVEL = 0
1010          };
1011          
1012          enum cc2420_rxctrl0_enums {
1013            CC2420_RXCTRL0_RXMIXBUF_CUR = 12, 
1014            CC2420_RXCTRL0_HIGH_LNA_GAIN = 10, 
1015            CC2420_RXCTRL0_MED_LNA_GAIN = 8, 
1016            CC2420_RXCTRL0_LOW_LNA_GAIN = 6, 
1017            CC2420_RXCTRL0_HIGH_LNA_CURRENT = 4, 
1018            CC2420_RXCTRL0_MED_LNA_CURRENT = 2, 
1019            CC2420_RXCTRL0_LOW_LNA_CURRENT = 0
1020          };
1021          
1022          enum cc2420_rxctrl1_enums {
1023            CC2420_RXCTRL1_RXBPF_LOCUR = 13, 
1024            CC2420_RXCTRL1_RXBPF_MIDCUR = 12, 
1025            CC2420_RXCTRL1_LOW_LOWGAIN = 11, 
1026            CC2420_RXCTRL1_MED_LOWGAIN = 10, 
1027            CC2420_RXCTRL1_HIGH_HGM = 9, 
1028            CC2420_RXCTRL1_MED_HGM = 8, 
1029            CC2420_RXCTRL1_LNA_CAP_ARRAY = 6, 
1030            CC2420_RXCTRL1_RXMIX_TAIL = 4, 
1031            CC2420_RXCTRL1_RXMIX_VCM = 2, 
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 18  

1032            CC2420_RXCTRL1_RXMIX_CURRENT = 0
1033          };
1034          
1035          enum cc2420_rsctrl_enums {
1036            CC2420_FSCTRL_LOCK_THR = 14, 
1037            CC2420_FSCTRL_CAL_DONE = 13, 
1038            CC2420_FSCTRL_CAL_RUNNING = 12, 
1039            CC2420_FSCTRL_LOCK_LENGTH = 11, 
1040            CC2420_FSCTRL_LOCK_STATUS = 10, 
1041            CC2420_FSCTRL_FREQ = 0
1042          };
1043          
1044          enum cc2420_secctrl0_enums {
1045            CC2420_SECCTRL0_RXFIFO_PROTECTION = 9, 
1046            CC2420_SECCTRL0_SEC_CBC_HEAD = 8, 
1047            CC2420_SECCTRL0_SEC_SAKEYSEL = 7, 
1048            CC2420_SECCTRL0_SEC_TXKEYSEL = 6, 
1049            CC2420_SECCTRL0_SEC_RXKEYSEL = 5, 
1050            CC2420_SECCTRL0_SEC_M = 2, 
1051            CC2420_SECCTRL0_SEC_MODE = 0
1052          };
1053          
1054          enum cc2420_secctrl1_enums {
1055            CC2420_SECCTRL1_SEC_TXL = 8, 
1056            CC2420_SECCTRL1_SEC_RXL = 0
1057          };
1058          
1059          enum cc2420_battmon_enums {
1060            CC2420_BATTMON_BATT_OK = 6, 
1061            CC2420_BATTMON_BATTMON_EN = 5, 
1062            CC2420_BATTMON_BATTMON_VOLTAGE = 0
1063          };
1064          
1065          enum cc2420_iocfg0_enums {
1066            CC2420_IOCFG0_BCN_ACCEPT = 11, 
1067            CC2420_IOCFG0_FIFO_POLARITY = 10, 
1068            CC2420_IOCFG0_FIFOP_POLARITY = 9, 
1069            CC2420_IOCFG0_SFD_POLARITY = 8, 
1070            CC2420_IOCFG0_CCA_POLARITY = 7, 
1071            CC2420_IOCFG0_FIFOP_THR = 0
1072          };
1073          
1074          enum cc2420_iocfg1_enums {
1075            CC2420_IOCFG1_HSSD_SRC = 10, 
1076            CC2420_IOCFG1_SFDMUX = 5, 
1077            CC2420_IOCFG1_CCAMUX = 0
1078          };
1079          
1080          enum cc2420_manfidl_enums {
1081            CC2420_MANFIDL_PARTNUM = 12, 
1082            CC2420_MANFIDL_MANFID = 0
1083          };
1084          
1085          enum cc2420_manfidh_enums {
1086            CC2420_MANFIDH_VERSION = 12, 
1087            CC2420_MANFIDH_PARTNUM = 0
1088          };
1089          
1090          enum cc2420_fsmtc_enums {
1091            CC2420_FSMTC_TC_RXCHAIN2RX = 13, 
1092            CC2420_FSMTC_TC_SWITCH2TX = 10, 
1093            CC2420_FSMTC_TC_PAON2TX = 6, 
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 19  

1094            CC2420_FSMTC_TC_TXEND2SWITCH = 3, 
1095            CC2420_FSMTC_TC_TXEND2PAOFF = 0
1096          };
1097          
1098          enum cc2420_sfdmux_enums {
1099            CC2420_SFDMUX_SFD = 0, 
1100            CC2420_SFDMUX_XOSC16M_STABLE = 24
1101          };
1102          //# 38 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/cc2420/IEEE802154.h"
1103          enum ieee154_fcf_enums {
1104            IEEE154_FCF_FRAME_TYPE = 0, 
1105            IEEE154_FCF_SECURITY_ENABLED = 3, 
1106            IEEE154_FCF_FRAME_PENDING = 4, 
1107            IEEE154_FCF_ACK_REQ = 5, 
1108            IEEE154_FCF_INTRAPAN = 6, 
1109            IEEE154_FCF_DEST_ADDR_MODE = 10, 
1110            IEEE154_FCF_SRC_ADDR_MODE = 14
1111          };
1112          
1113          enum ieee154_fcf_type_enums {
1114            IEEE154_TYPE_BEACON = 0, 
1115            IEEE154_TYPE_DATA = 1, 
1116            IEEE154_TYPE_ACK = 2, 
1117            IEEE154_TYPE_MAC_CMD = 3
1118          };
1119          
1120          enum iee154_fcf_addr_mode_enums {
1121            IEEE154_ADDR_NONE = 0, 
1122            IEEE154_ADDR_SHORT = 2, 
1123            IEEE154_ADDR_EXT = 3
1124          };
1125          //# 25 "../../includes/frame_format.h"
1126          //#line 15
1127          typedef struct MPDU {
1128          
1129            uint8_t length;
1130          
1131            uint8_t frame_control1;
1132          
1133            uint8_t frame_control2;
1134          
1135            uint8_t seq_num;
1136            uint8_t _data[120];
1137          } MPDU;
1138          //#line 37
1139          //#line 27
1140          typedef struct MPDUBuffer {
1141          
1142            uint8_t length;
1143          
1144            uint8_t frame_control1;
1145            uint8_t frame_control2;
1146            uint8_t seq_num;
1147            uint8_t _data[120];
1148            uint8_t retransmission;
1149            uint8_t indirect;
1150          } MPDUBuffer;
1151          //#line 57
1152          //#line 51
1153          typedef struct beacon_addr_short {
1154          
1155            uint16_t destination_PAN_identifier;
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 20  

1156            uint16_t destination_address;
1157            uint16_t source_address;
1158            uint16_t superframe_specification;
1159          } beacon_addr_short;
1160          //#line 90
1161          //#line 83
1162          typedef struct ACK {
1163          
1164            uint8_t length;
1165            uint8_t frame_control1;
1166            uint8_t frame_control2;
1167          
1168            uint8_t seq_num;
1169          } ACK;
1170          
1171          
1172          
1173          
1174          
1175          
1176          
1177          
1178          
1179          //#line 96
1180          typedef struct cmd_association_request {
1181          
1182            uint8_t command_frame_identifier;
1183            uint8_t capability_information;
1184          } cmd_association_request;
1185          
1186          
1187          
1188          
1189          
1190          
1191          
1192          
1193          //#line 102
1194          typedef struct cmd_association_response {
1195          
1196            uint8_t command_frame_identifier;
1197            uint8_t short_address1;
1198            uint8_t short_address2;
1199          
1200            uint8_t association_status;
1201          } cmd_association_response;
1202          //#line 122
1203          //#line 112
1204          typedef struct cmd_disassociation_notification {
1205          
1206            uint16_t destination_PAN_identifier;
1207            uint32_t destination_address0;
1208            uint32_t destination_address1;
1209            uint16_t source_PAN_identifier;
1210            uint32_t source_address0;
1211            uint32_t source_address1;
1212            uint8_t command_frame_identifier;
1213            uint8_t disassociation_reason;
1214          } cmd_disassociation_notification;
1215          
1216          
1217          
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 21  

1218          
1219          
1220          
1221          
1222          //#line 125
1223          typedef struct cmd_beacon_request {
1224          
1225            uint16_t destination_PAN_identifier;
1226            uint16_t destination_address;
1227            uint8_t command_frame_identifier;
1228          } cmd_beacon_request;
1229          
1230          
1231          
1232          
1233          
1234          
1235          
1236          
1237          
1238          //#line 134
1239          typedef struct cmd_gts_request {
1240          
1241            uint16_t source_PAN_identifier;
1242            uint16_t source_address;
1243            uint8_t command_frame_identifier;
1244            uint8_t gts_characteristics;
1245          } cmd_gts_request;
1246          
1247          
1248          
1249          
1250          //#line 142
1251          typedef struct cmd_default {
1252          
1253            uint8_t command_frame_identifier;
1254          } cmd_default;
1255          //#line 163
1256          //#line 149
1257          typedef struct cmd_coord_realignment {
1258          
1259            uint8_t command_frame_identifier;
1260            uint8_t PAN_identifier0;
1261            uint8_t PAN_identifier1;
1262            uint8_t coordinator_short_address0;
1263            uint8_t coordinator_short_address1;
1264          
1265          
1266          
1267          
1268          
1269            uint8_t logical_channel;
1270            uint16_t short_address;
1271          } cmd_coord_realignment;
1272          //#line 183
1273          //#line 179
1274          typedef struct dest_short {
1275          
1276            uint16_t destination_PAN_identifier;
1277            uint16_t destination_address;
1278          } dest_short;
1279          
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 22  

1280          
1281          
1282          
1283          
1284          
1285          //#line 185
1286          typedef struct dest_long {
1287          
1288            uint16_t destination_PAN_identifier;
1289            uint32_t destination_address0;
1290            uint32_t destination_address1;
1291          } dest_long;
1292          
1293          
1294          
1295          
1296          
1297          //#line 193
1298          typedef struct intra_pan_source_short {
1299          
1300            uint16_t source_address;
1301          } intra_pan_source_short;
1302          
1303          
1304          
1305          
1306          
1307          //#line 198
1308          typedef struct intra_pan_source_long {
1309          
1310            uint32_t source_address0;
1311            uint32_t source_address1;
1312          } intra_pan_source_long;
1313          
1314          
1315          
1316          
1317          
1318          
1319          //#line 205
1320          typedef struct source_short {
1321          
1322            uint16_t source_PAN_identifier;
1323            uint16_t source_address;
1324          } source_short;
1325          
1326          
1327          
1328          
1329          
1330          
1331          
1332          //#line 212
1333          typedef struct source_long {
1334          
1335            uint16_t source_PAN_identifier;
1336            uint32_t source_address0;
1337            uint32_t source_address1;
1338          } source_long;
1339          //# 29 "../phy_const.h"
1340          //#line 23
1341          typedef struct __nesc_unnamed4271 {
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 23  

1342          
1343            uint8_t phyCurrentChannel;
1344            uint8_t phyChannelsSupported;
1345            uint8_t phyTransmitPower;
1346            uint8_t phyCcaMode;
1347          } phyPIB;
1348          //# 11 "../phy_enumerations.h"
1349          enum __nesc_unnamed4272 {
1350            PHY_BUSY = 0x00, 
1351            PHY_BUSY_RX = 0x01, 
1352            PHY_BUSY_TX = 0x02, 
1353            PHY_FORCE_TRX_OFF = 0x03, 
1354            PHY_IDLE = 0x04, 
1355            PHY_INVALID_PARAMETER = 0x05, 
1356            PHY_RX_ON = 0x06, 
1357            PHY_SUCCESS = 0x07, 
1358            PHY_TRX_OFF = 0x08, 
1359            PHY_TX_ON = 0x09, 
1360            PHY_UNSUPPORTED_ATTRIBUTE = 0x0a
1361          };
1362          
1363          
1364          enum __nesc_unnamed4273 {
1365            PHYCURRENTCHANNEL = 0x00, 
1366            PHYCHANNELSSUPPORTED = 0X01, 
1367            PHYTRANSMITPOWER = 0X02, 
1368            PHYCCAMODE = 0X03
1369          };
1370          //# 43 "/opt/tinyos-2.1.2/tos/types/Leds.h"
1371          enum __nesc_unnamed4274 {
1372            LEDS_LED0 = 1 << 0, 
1373            LEDS_LED1 = 1 << 1, 
1374            LEDS_LED2 = 1 << 2, 
1375            LEDS_LED3 = 1 << 3, 
1376            LEDS_LED4 = 1 << 4, 
1377            LEDS_LED5 = 1 << 5, 
1378            LEDS_LED6 = 1 << 6, 
1379            LEDS_LED7 = 1 << 7
1380          };
1381          //# 26 "../packet.h"
1382          typedef uint16_t mac_addr_t;
1383          typedef uint8_t ieee_mac_addr_t[8];
1384          
1385          
1386          
1387          enum fcf_stuff {
1388            FCF_FT_BEACON = 0x0000, 
1389            FCF_FT_DATA = 0x0001, 
1390            FCF_FT_ACK = 0x0002, 
1391            FCF_FT_MAC_COMMAND = 0x0003, 
1392            FCF_FT_MASK = 0x0007, 
1393          
1394          
1395          
1396            FCF_SECENC = 0x0008, 
1397            FCF_FRAMEPENDING = 0x0010, 
1398            FCF_ACKREQ = 0x0020, 
1399            FCF_INTRAPAN = 0x0040, 
1400          
1401          
1402            FCF_DST_NO_ADDR = 0x0000, 
1403            FCF_DST_SHORT_ADDR = 0x0800, 
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 24  

1404            FCF_DST_LONG_ADDR = 0x0C00, 
1405            FCF_DST_ADDR_MASK = 0x0C00, 
1406          
1407            FCF_SRC_NO_ADDR = 0x0000, 
1408            FCF_SRC_SHORT_ADDR = 0x8000, 
1409            FCF_SRC_LONG_ADDR = 0xC000, 
1410            FCF_SRC_ADDR_MASK = 0xC000, 
1411          
1412            FCS_CRC_OK_MASK = 0x80, 
1413            FCS_CORRELATION_MASK = 0x7F
1414          };
1415          
1416          
1417          
1418          
1419          //#line 60
1420          typedef struct __nesc_unnamed4275 {
1421            int8_t rssi;
1422            uint8_t correlation;
1423          } fsc_t;
1424          
1425          struct packet {
1426          
1427            uint8_t length;
1428          
1429            uint16_t fcf;
1430            uint8_t _data_seq_no;
1431            mac_addr_t dest;
1432            mac_addr_t src;
1433          
1434            uint8_t _data[122 - 2 * sizeof(mac_addr_t )];
1435          
1436            fsc_t fcs;
1437          };
1438          
1439          
1440          
1441          
1442          
1443          typedef struct packet packet_t;
1444          //# 6 "../cc2420.h"
1445          enum cc2420_defaults {
1446          
1447            CC2420_DEFAULT_CHANNEL = 17, 
1448            CC2420_DEFAULT_POWER = 100
1449          };
1450          
1451          
1452          enum cc2420_error_codes {
1453          
1454          
1455          
1456            CC2420_ERROR_CCA = 0x02, 
1457            CC2420_ERROR_TX = 0x03, 
1458            CC2420_ERROR_RADIO_OFF = 0x04
1459          };
1460          typedef uint16_t RandomMlcgC__SeedInit__parameter;
1461          //# 113 "/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc"
1462          static void TestStdControlP__SplitControl__startDone(error_t error);
1463          //#line 138
1464          static void TestStdControlP__SplitControl__stopDone(error_t error);
1465          //# 60 "/opt/tinyos-2.1.2/tos/interfaces/Boot.nc"
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 25  

1466          static void TestStdControlP__Boot__booted(void );
1467          //# 62 "/opt/tinyos-2.1.2/tos/interfaces/Init.nc"
1468          static error_t PlatformP__Init__init(void );
1469          //# 67 "/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc"
1470          static error_t SchedulerBasicP__TaskBasic__postTask(
1471          //# 56 "/opt/tinyos-2.1.2/tos/system/SchedulerBasicP.nc"
1472          uint8_t arg_0x2ab5a42bc3c8);
1473          //# 75 "/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc"
1474          static void SchedulerBasicP__TaskBasic__default__runTask(
1475          //# 56 "/opt/tinyos-2.1.2/tos/system/SchedulerBasicP.nc"
1476          uint8_t arg_0x2ab5a42bc3c8);
1477          //# 57 "/opt/tinyos-2.1.2/tos/interfaces/Scheduler.nc"
1478          static void SchedulerBasicP__Scheduler__init(void );
1479          //#line 72
1480          static void SchedulerBasicP__Scheduler__taskLoop(void );
1481          //#line 65
1482          static bool SchedulerBasicP__Scheduler__runNextTask(void );
1483          //# 76 "/opt/tinyos-2.1.2/tos/interfaces/McuSleep.nc"
1484          static void McuSleepC__McuSleep__sleep(void );
1485          //# 104 "/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc"
1486          static error_t PhyP__SplitControl__start(void );
1487          //# 62 "/opt/tinyos-2.1.2/tos/interfaces/Init.nc"
1488          static error_t PhyP__Init__init(void );
1489          //# 43 "../HALCC2420.nc"
1490          static void PhyP__HALCC2420__sendPacketDone(uint8_t *packet, error_t result);
1491          
1492          
1493          
1494          
1495          
1496          
1497          
1498          
1499          
1500          static uint8_t *PhyP__HALCC2420__receivedPacket(uint8_t *packet);
1501          //# 75 "/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc"
1502          static void PhyP__sendDone_task__runTask(void );
1503          //#line 75
1504          static void PhyP__stopDone_task__runTask(void );
1505          //#line 75
1506          static void PhyP__startDone_task__runTask(void );
1507          //#line 75
1508          static void HalCC2430RadioP__receivedPacketTask__runTask(void );
1509          //#line 75
1510          static void HalCC2430RadioP__sendPacketDoneTask__runTask(void );
1511          //# 68 "/opt/tinyos-2.1.2/tos/interfaces/GpioInterrupt.nc"
1512          static void HalCC2430RadioP__InterruptRFErr__fired(void );
1513          //# 95 "/opt/tinyos-2.1.2/tos/interfaces/StdControl.nc"
1514          static error_t HalCC2430RadioP__HALCC2420Control__start(void );
1515          //# 68 "/opt/tinyos-2.1.2/tos/interfaces/GpioInterrupt.nc"
1516          static void HalCC2430RadioP__InterruptTXDone__fired(void );
1517          //# 62 "/opt/tinyos-2.1.2/tos/interfaces/Init.nc"
1518          static error_t HalCC2430RadioP__Init__init(void );
1519          //# 75 "/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc"
1520          static void HalCC2430RadioP__initTask__runTask(void );
1521          //#line 75
1522          static void HalCC2430RadioP__flushBufferTask__runTask(void );
1523          //# 108 "/opt/tinyos-2.x-contrib/diku/common/lib/stdout/StdOut.nc"
1524          static void HalCC2430RadioP__StdOut__get(uint8_t _data);
1525          //# 68 "/opt/tinyos-2.1.2/tos/interfaces/GpioInterrupt.nc"
1526          static void HalCC2430RadioP__InterruptFIFOP__fired(void );
1527          //# 75 "/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc"
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 26  

1528          static void HalCC2430RadioP__setChannelTask__runTask(void );
1529          //#line 75
1530          static void HalCC2430RadioP__transmitTask__runTask(void );
1531          //# 61 "/opt/tinyos-2.1.2/tos/interfaces/GpioCapture.nc"
1532          static void HplCC2430InterruptsC__CaptureSFD__default__captured(uint16_t time);
1533          //# 53 "/opt/tinyos-2.1.2/tos/interfaces/GpioInterrupt.nc"
1534          static error_t HplCC2430InterruptsC__InterruptRFErr__enableRisingEdge(void );
1535          //#line 53
1536          static error_t HplCC2430InterruptsC__InterruptTXDone__enableRisingEdge(void );
1537          //#line 68
1538          static void HplCC2430InterruptsC__InterruptCCA__default__fired(void );
1539          //#line 61
1540          static error_t HplCC2430InterruptsC__InterruptFIFOP__disable(void );
1541          //#line 53
1542          static error_t HplCC2430InterruptsC__InterruptFIFOP__enableRisingEdge(void );
1543          //# 62 "/opt/tinyos-2.1.2/tos/interfaces/Init.nc"
1544          static error_t StdOutM__Init__init(void );
1545          //# 58 "/opt/tinyos-2.1.2/tos/lib/serial/SerialByteComm.nc"
1546          static void StdOutM__UART__get(uint8_t _data);
1547          
1548          
1549          
1550          
1551          
1552          static void StdOutM__UART__putDone(void );
1553          //# 34 "/opt/tinyos-2.x-contrib/diku/common/lib/stdout/StdOut.nc"
1554          static int StdOutM__StdOut__print(const char *str);
1555          //# 62 "/opt/tinyos-2.1.2/tos/interfaces/Init.nc"
1556          static error_t HalCC2430SimpleUartP__Init__init(void );
1557          //# 52 "/opt/tinyos-2.1.2/tos/lib/serial/SerialByteComm.nc"
1558          static error_t HalCC2430SimpleUartP__uart0__put(uint8_t _data);
1559          //# 62 "/opt/tinyos-2.1.2/tos/interfaces/Init.nc"
1560          static error_t RandomMlcgC__Init__init(void );
1561          //#line 62
1562          static error_t LedsP__Init__init(void );
1563          //# 46 "/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc"
1564          static void HplMcs51GeneralIOC__P11__makeOutput(void );
1565          //#line 40
1566          static void HplMcs51GeneralIOC__P11__set(void );
1567          
1568          
1569          
1570          
1571          
1572          static void HplMcs51GeneralIOC__P10__makeOutput(void );
1573          //#line 40
1574          static void HplMcs51GeneralIOC__P10__set(void );
1575          
1576          
1577          
1578          
1579          
1580          static void /*PlatformLedsC.NoPinC*/NoPinC__0__GeneralIO__makeOutput(void );
1581          //#line 40
1582          static void /*PlatformLedsC.NoPinC*/NoPinC__0__GeneralIO__set(void );
1583          //# 104 "/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc"
1584          static error_t TestStdControlP__SplitControl__start(void );
1585          //# 6 "TestStdControlP.nc"
1586          static  /*inline*/  void TestStdControlP__Boot__booted(void );
1587          
1588          
1589          
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 27  

1590          static  /*inline*/  void TestStdControlP__SplitControl__startDone(error_t error);
1591          
1592          
1593          static  /*inline*/  void TestStdControlP__SplitControl__stopDone(error_t error);
1594          //# 62 "/opt/tinyos-2.1.2/tos/interfaces/Init.nc"
1595          static error_t PlatformP__LedsInit__init(void );
1596          //# 48 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/platforms/cc2430em/PlatformP.nc"
1597          static  /*inline*/  error_t PlatformP__Init__init(void );
1598          //# 62 "/opt/tinyos-2.1.2/tos/interfaces/Init.nc"
1599          static error_t RealMainP__SoftwareInit__init(void );
1600          //# 60 "/opt/tinyos-2.1.2/tos/interfaces/Boot.nc"
1601          static void RealMainP__Boot__booted(void );
1602          //# 62 "/opt/tinyos-2.1.2/tos/interfaces/Init.nc"
1603          static error_t RealMainP__PlatformInit__init(void );
1604          //# 57 "/opt/tinyos-2.1.2/tos/interfaces/Scheduler.nc"
1605          static void RealMainP__Scheduler__init(void );
1606          //#line 72
1607          static void RealMainP__Scheduler__taskLoop(void );
1608          //#line 65
1609          static bool RealMainP__Scheduler__runNextTask(void );
1610          //# 63 "/opt/tinyos-2.1.2/tos/system/RealMainP.nc"
1611          int main(void )   ;
1612          //# 75 "/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc"
1613          static void SchedulerBasicP__TaskBasic__runTask(
1614          //# 56 "/opt/tinyos-2.1.2/tos/system/SchedulerBasicP.nc"
1615          uint8_t arg_0x2ab5a42bc3c8);
1616          //# 76 "/opt/tinyos-2.1.2/tos/interfaces/McuSleep.nc"
1617          static void SchedulerBasicP__McuSleep__sleep(void );
1618          //# 61 "/opt/tinyos-2.1.2/tos/system/SchedulerBasicP.nc"
1619          enum SchedulerBasicP____nesc_unnamed4276 {
1620          
1621            SchedulerBasicP__NUM_TASKS = 9U, 
1622            SchedulerBasicP__NO_TASK = 255
1623          };
1624          
1625          uint8_t SchedulerBasicP__m_head;
1626          uint8_t SchedulerBasicP__m_tail;
1627          uint8_t SchedulerBasicP__m_next[SchedulerBasicP__NUM_TASKS];
1628          
1629          
1630          
1631          
1632          
1633          
1634          
1635          
1636          static   /*inline*/   uint8_t SchedulerBasicP__popTask(void );
1637          //#line 97
1638          static  /*inline*/  bool SchedulerBasicP__isWaiting(uint8_t id);
1639          
1640          
1641          
1642          
1643          static  /*inline*/  bool SchedulerBasicP__pushTask(uint8_t id);
1644          //#line 124
1645          static  /*inline*/  void SchedulerBasicP__Scheduler__init(void );
1646          
1647          
1648          
1649          
1650          
1651          
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 28  

1652          
1653          
1654          
1655          static bool SchedulerBasicP__Scheduler__runNextTask(void );
1656          //#line 149
1657          static  /*inline*/  void SchedulerBasicP__Scheduler__taskLoop(void );
1658          //#line 170
1659          static error_t SchedulerBasicP__TaskBasic__postTask(uint8_t id);
1660          
1661          
1662          
1663          
1664          static void SchedulerBasicP__TaskBasic__default__runTask(uint8_t id);
1665          //# 51 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/McuSleepC.nc"
1666          static  /*inline*/  void McuSleepC__McuSleep__sleep(void );
1667          //# 113 "/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc"
1668          static void PhyP__SplitControl__startDone(error_t error);
1669          //#line 138
1670          static void PhyP__SplitControl__stopDone(error_t error);
1671          //# 95 "/opt/tinyos-2.1.2/tos/interfaces/StdControl.nc"
1672          static error_t PhyP__HALCC2420Control__start(void );
1673          //# 81 "../PhyP.nc"
1674          enum PhyP____nesc_unnamed4277 {
1675          //#line 81
1676            PhyP__startDone_task = 0U
1677          };
1678          //#line 81
1679          typedef int PhyP____nesc_sillytask_startDone_task[];
1680          enum PhyP____nesc_unnamed4278 {
1681          //#line 82
1682            PhyP__stopDone_task = 1U
1683          };
1684          //#line 82
1685          typedef int PhyP____nesc_sillytask_stopDone_task[PhyP__stopDone_task];
1686          enum PhyP____nesc_unnamed4279 {
1687          //#line 83
1688            PhyP__sendDone_task = 2U
1689          };
1690          //#line 83
1691          typedef int PhyP____nesc_sillytask_sendDone_task[PhyP__sendDone_task];
1692          //#line 54
1693          static  /*inline*/  void PhyP__HALCC2420__sendPacketDone(uint8_t *packet, error_t result);
1694          
1695          
1696          static  /*inline*/  uint8_t *PhyP__HALCC2420__receivedPacket(uint8_t *packet);
1697          //#line 73
1698          error_t PhyP__sendErr = SUCCESS;
1699          //#line 90
1700          static  /*inline*/  error_t PhyP__Init__init(void );
1701          //#line 109
1702          static  /*inline*/  error_t PhyP__SplitControl__start(void );
1703          //#line 145
1704          static  /*inline*/  void PhyP__startDone_task__runTask(void );
1705          
1706          
1707          static  /*inline*/  void PhyP__sendDone_task__runTask(void );
1708          
1709          
1710          
1711          
1712          
1713          
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 29  

1714          static  /*inline*/  void PhyP__stopDone_task__runTask(void );
1715          //# 67 "/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc"
1716          static error_t HalCC2430RadioP__receivedPacketTask__postTask(void );
1717          //#line 67
1718          static error_t HalCC2430RadioP__sendPacketDoneTask__postTask(void );
1719          //# 53 "/opt/tinyos-2.1.2/tos/interfaces/GpioInterrupt.nc"
1720          static error_t HalCC2430RadioP__InterruptRFErr__enableRisingEdge(void );
1721          //#line 53
1722          static error_t HalCC2430RadioP__InterruptTXDone__enableRisingEdge(void );
1723          //# 67 "/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc"
1724          static error_t HalCC2430RadioP__initTask__postTask(void );
1725          //# 43 "../HALCC2420.nc"
1726          static void HalCC2430RadioP__HALCC2420__sendPacketDone(uint8_t *packet, error_t result);
1727          
1728          
1729          
1730          
1731          
1732          
1733          
1734          
1735          
1736          static uint8_t *HalCC2430RadioP__HALCC2420__receivedPacket(uint8_t *packet);
1737          //# 67 "/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc"
1738          static error_t HalCC2430RadioP__flushBufferTask__postTask(void );
1739          //# 34 "/opt/tinyos-2.x-contrib/diku/common/lib/stdout/StdOut.nc"
1740          static int HalCC2430RadioP__StdOut__print(const char *str);
1741          //# 61 "/opt/tinyos-2.1.2/tos/interfaces/GpioInterrupt.nc"
1742          static error_t HalCC2430RadioP__InterruptFIFOP__disable(void );
1743          //#line 53
1744          static error_t HalCC2430RadioP__InterruptFIFOP__enableRisingEdge(void );
1745          //# 81 "../HalCC2430RadioP.nc"
1746          enum HalCC2430RadioP____nesc_unnamed4280 {
1747          //#line 81
1748            HalCC2430RadioP__initTask = 3U
1749          };
1750          //#line 81
1751          typedef int HalCC2430RadioP____nesc_sillytask_initTask[HalCC2430RadioP__initTask];
1752          enum HalCC2430RadioP____nesc_unnamed4281 {
1753          //#line 82
1754            HalCC2430RadioP__transmitTask = 4U
1755          };
1756          //#line 82
1757          typedef int HalCC2430RadioP____nesc_sillytask_transmitTask[HalCC2430RadioP__transmitTask];
1758          enum HalCC2430RadioP____nesc_unnamed4282 {
1759          //#line 83
1760            HalCC2430RadioP__setChannelTask = 5U
1761          };
1762          //#line 83
1763          typedef int HalCC2430RadioP____nesc_sillytask_setChannelTask[HalCC2430RadioP__setChannelTask];
1764          //#line 472
1765          enum HalCC2430RadioP____nesc_unnamed4283 {
1766          //#line 472
1767            HalCC2430RadioP__receivedPacketTask = 6U
1768          };
1769          //#line 472
1770          typedef int HalCC2430RadioP____nesc_sillytask_receivedPacketTask[HalCC2430RadioP__receivedPacketTask];
1771          enum HalCC2430RadioP____nesc_unnamed4284 {
1772          //#line 473
1773            HalCC2430RadioP__flushBufferTask = 7U
1774          };
1775          //#line 473
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 30  

1776          typedef int HalCC2430RadioP____nesc_sillytask_flushBufferTask[HalCC2430RadioP__flushBufferTask];
1777          enum HalCC2430RadioP____nesc_unnamed4285 {
1778          //#line 474
1779            HalCC2430RadioP__sendPacketDoneTask = 8U
1780          };
1781          //#line 474
1782          typedef int HalCC2430RadioP____nesc_sillytask_sendPacketDoneTask[HalCC2430RadioP__sendPacketDoneTask];
1783          //# 58 "../hplcc2420.h"
1784          //#line 4
1785          typedef enum HalCC2430RadioP____nesc_unnamed4286 {
1786          
1787            HalCC2430RadioP__CC_REG_SNOP = 0x00, 
1788            HalCC2430RadioP__CC_REG_SXOSCON = 0x01, 
1789            HalCC2430RadioP__CC_REG_STXCAL = 0x02, 
1790            HalCC2430RadioP__CC_REG_SRXON = 0x03, 
1791            HalCC2430RadioP__CC_REG_STXON = 0x04, 
1792            HalCC2430RadioP__CC_REG_STXONCCA = 0x05, 
1793            HalCC2430RadioP__CC_REG_SRFOFF = 0x06, 
1794            HalCC2430RadioP__CC_REG_SXOSCOFF = 0x07, 
1795            HalCC2430RadioP__CC_REG_SFLUSHRX = 0x08, 
1796            HalCC2430RadioP__CC_REG_SFLUSHTX = 0x09, 
1797            HalCC2430RadioP__CC_REG_SACK = 0x0A, 
1798            HalCC2430RadioP__CC_REG_SACKPEND = 0x0B, 
1799            HalCC2430RadioP__CC_REG_SRXDEC = 0x0C, 
1800            HalCC2430RadioP__CC_REG_STXENC = 0x0D, 
1801            HalCC2430RadioP__CC_REG_SAES = 0x0E, 
1802          
1803            HalCC2430RadioP__CC_REG_MAIN = 0x10, 
1804            HalCC2430RadioP__CC_REG_MDMCTRL0 = 0x11, 
1805            HalCC2430RadioP__CC_REG_MDMCTRL1 = 0x12, 
1806            HalCC2430RadioP__CC_REG_RSSI = 0x13, 
1807            HalCC2430RadioP__CC_REG_SYNCWORD = 0x14, 
1808            HalCC2430RadioP__CC_REG_TXCTRL = 0x15, 
1809            HalCC2430RadioP__CC_REG_RXCTRL0 = 0x16, 
1810            HalCC2430RadioP__CC_REG_RXCTRL1 = 0x17, 
1811            HalCC2430RadioP__CC_REG_FSCTRL = 0x18, 
1812            HalCC2430RadioP__CC_REG_SECCTRL0 = 0x19, 
1813            HalCC2430RadioP__CC_REG_SECCTRL1 = 0x1A, 
1814            HalCC2430RadioP__CC_REG_BATTMON = 0x1B, 
1815            HalCC2430RadioP__CC_REG_IOCFG0 = 0x1C, 
1816            HalCC2430RadioP__CC_REG_IOCFG1 = 0x1D, 
1817            HalCC2430RadioP__CC_REG_MANFIDL = 0x1E, 
1818            HalCC2430RadioP__CC_REG_MANFIDH = 0x1F, 
1819            HalCC2430RadioP__CC_REG_FSMTC = 0x20, 
1820            HalCC2430RadioP__CC_REG_MANAND = 0x21, 
1821            HalCC2430RadioP__CC_REG_MANOR = 0x22, 
1822            HalCC2430RadioP__CC_REG_AGCCTRL = 0x23, 
1823            HalCC2430RadioP__CC_REG_AGCTST0 = 0x24, 
1824            HalCC2430RadioP__CC_REG_AGCTST1 = 0x25, 
1825            HalCC2430RadioP__CC_REG_AGCTST2 = 0x26, 
1826            HalCC2430RadioP__CC_REG_FSTST0 = 0x27, 
1827            HalCC2430RadioP__CC_REG_FSTST1 = 0x28, 
1828            HalCC2430RadioP__CC_REG_FSTST2 = 0x29, 
1829            HalCC2430RadioP__CC_REG_FSTST3 = 0x2A, 
1830            HalCC2430RadioP__CC_REG_RXBPFTST = 0x2B, 
1831            HalCC2430RadioP__CC_REG_FSMSTATE = 0x2C, 
1832            HalCC2430RadioP__CC_REG_ADCTST = 0x2D, 
1833            HalCC2430RadioP__CC_REG_DACTST = 0x2E, 
1834            HalCC2430RadioP__CC_REG_TOPTST = 0x2F, 
1835            HalCC2430RadioP__CC_REG_RESERVED = 0x30, 
1836          
1837            HalCC2430RadioP__CC_REG_TXFIFO = 0x3E, 
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 31  

1838            HalCC2430RadioP__CC_REG_RXFIFO = 0x3F
1839          } HalCC2430RadioP__cc2420_reg_t;
1840          //#line 73
1841          //#line 60
1842          typedef enum HalCC2430RadioP____nesc_unnamed4287 {
1843          
1844            HalCC2430RadioP__CC_ADDR_TXFIFO = 0x000, 
1845            HalCC2430RadioP__CC_ADDR_RXFIFO = 0x080, 
1846            HalCC2430RadioP__CC_ADDR_KEY0 = 0x100, 
1847            HalCC2430RadioP__CC_ADDR_RXNONCE = 0x110, 
1848            HalCC2430RadioP__CC_ADDR_SABUF = 0x120, 
1849            HalCC2430RadioP__CC_ADDR_KEY1 = 0x130, 
1850            HalCC2430RadioP__CC_ADDR_TXNONCE = 0x140, 
1851            HalCC2430RadioP__CC_ADDR_CBCSTATE = 0x150, 
1852            HalCC2430RadioP__CC_ADDR_IEEEADDR = 0x160, 
1853            HalCC2430RadioP__CC_ADDR_PANID = 0x168, 
1854            HalCC2430RadioP__CC_ADDR_SHORTADDR = 0x16A
1855          } HalCC2430RadioP__cc2420_addr_t;
1856          //#line 125
1857          //#line 115
1858          typedef enum HalCC2430RadioP____nesc_unnamed4288 {
1859          
1860            HalCC2430RadioP__CCA_HYST_0DB = 0x00, 
1861            HalCC2430RadioP__CCA_HYST_1DB = 0x01, 
1862            HalCC2430RadioP__CCA_HYST_2DB = 0x02, 
1863            HalCC2430RadioP__CCA_HYST_3DB = 0x03, 
1864            HalCC2430RadioP__CCA_HYST_4DB = 0x04, 
1865            HalCC2430RadioP__CCA_HYST_5DB = 0x05, 
1866            HalCC2430RadioP__CCA_HYST_6DB = 0x06, 
1867            HalCC2430RadioP__CCA_HYST_7DB = 0x07
1868          } HalCC2430RadioP__cca_hyst_db_t;
1869          //#line 145
1870          //#line 127
1871          typedef enum HalCC2430RadioP____nesc_unnamed4289 {
1872          
1873            HalCC2430RadioP__LEADING_ZERO_BYTES_1 = 0x00, 
1874            HalCC2430RadioP__LEADING_ZERO_BYTES_2 = 0x01, 
1875            HalCC2430RadioP__LEADING_ZERO_BYTES_3 = 0x02, 
1876            HalCC2430RadioP__LEADING_ZERO_BYTES_4 = 0x03, 
1877            HalCC2430RadioP__LEADING_ZERO_BYTES_5 = 0x04, 
1878            HalCC2430RadioP__LEADING_ZERO_BYTES_6 = 0x05, 
1879            HalCC2430RadioP__LEADING_ZERO_BYTES_7 = 0x06, 
1880            HalCC2430RadioP__LEADING_ZERO_BYTES_8 = 0x07, 
1881            HalCC2430RadioP__LEADING_ZERO_BYTES_9 = 0x08, 
1882            HalCC2430RadioP__LEADING_ZERO_BYTES_10 = 0x09, 
1883            HalCC2430RadioP__LEADING_ZERO_BYTES_11 = 0x0A, 
1884            HalCC2430RadioP__LEADING_ZERO_BYTES_12 = 0x0B, 
1885            HalCC2430RadioP__LEADING_ZERO_BYTES_13 = 0x0C, 
1886            HalCC2430RadioP__LEADING_ZERO_BYTES_14 = 0x0D, 
1887            HalCC2430RadioP__LEADING_ZERO_BYTES_15 = 0x0E, 
1888            HalCC2430RadioP__LEADING_ZERO_BYTES_16 = 0x0F
1889          } HalCC2430RadioP__preamble_length_t;
1890          //#line 158
1891          //#line 147
1892          typedef struct HalCC2430RadioP____nesc_unnamed4290 {
1893          
1894            HalCC2430RadioP__preamble_length_t preamble_length : 4;
1895            bool autoack : 1;
1896            bool autocrc : 1;
1897            uint8_t cca_mode : 2;
1898            HalCC2430RadioP__cca_hyst_db_t cca_hyst : 3;
1899            bool adr_decode : 1;
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 32  

1900            bool pan_coordinator : 1;
1901            bool reserved_frame_mode : 1;
1902            uint8_t reserved : 2;
1903          } HalCC2430RadioP__MDMCTRL0_t;
1904          //# 63 "../HalCC2430RadioP.nc"
1905          sfr HalCC2430RadioP__RFIF = 0xE9;
1906          
1907          static  /*inline*/  void HalCC2430RadioP__CC2430SetPanid(uint16_t id);
1908          static  /*inline*/  void HalCC2430RadioP__CC2430SetShortaddr(uint16_t shortAddr);
1909          static  /*inline*/  void HalCC2430RadioP__CC2420SetIEEEAddr(ieee_mac_addr_t extAddress);
1910          static  /*inline*/  void HalCC2430RadioP__CC2430Reset(void );
1911          static  /*inline*/  void HalCC2430RadioP__CC2430RFEnable(void );
1912          static  /*inline*/  void HalCC2430RadioP__CC2430RFDisable(void );
1913          static  /*inline*/  void HalCC2430RadioP__CC2430ExternalOscillator(void );
1914          static void HalCC2430RadioP__CC2430RxEnable(void );
1915          static  /*inline*/  void HalCC2430RadioP__CC2430RxDisable(void );
1916          static void HalCC2430RadioP__CC2430ChannelSet(uint8_t channel);
1917          static  /*inline*/  void HalCC2430RadioP__CC2430PALevelSet(uint8_t new_power);
1918          static  /*inline*/  void HalCC2430RadioP__CC2430ControlSet(void );
1919          static  /*inline*/  void HalCC2430RadioP__CC2430TxWait(void );
1920          static void HalCC2430RadioP__wait(uint16_t u);
1921          //#line 93
1922          ieee_mac_addr_t HalCC2430RadioP__ieeeAddress;
1923          mac_addr_t HalCC2430RadioP__shortAddress;
1924          //#line 94
1925          mac_addr_t HalCC2430RadioP__panid;
1926          
1927          bool HalCC2430RadioP__rxEnabled = FALSE;
1928          
1929          uint8_t HalCC2430RadioP__receivedPacket[128];
1930          uint8_t *HalCC2430RadioP__receivedPacketPtr;
1931          
1932          
1933          
1934          
1935          
1936          static  /*inline*/  error_t HalCC2430RadioP__Init__init(void );
1937          //#line 127
1938          static  /*inline*/  void HalCC2430RadioP__initTask__runTask(void );
1939          //#line 186
1940          static  /*inline*/  error_t HalCC2430RadioP__HALCC2420Control__start(void );
1941          //#line 215
1942          uint8_t *HalCC2430RadioP__transmitPacketPtr;
1943          bool HalCC2430RadioP__transmitInProgress = FALSE;
1944          
1945          
1946          
1947          
1948          
1949          
1950          
1951          
1952          
1953          static  /*inline*/  void HalCC2430RadioP__transmitTask__runTask(void );
1954          //#line 311
1955          uint8_t HalCC2430RadioP__currentChannel;
1956          //#line 325
1957          static  /*inline*/  void HalCC2430RadioP__setChannelTask__runTask(void );
1958          //#line 446
1959          static  /*inline*/  void HalCC2430RadioP__CC2430SetPanid(uint16_t id);
1960          
1961          
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 33  

1962          
1963          
1964          static  /*inline*/  void HalCC2430RadioP__CC2430SetShortaddr(uint16_t shortAddr);
1965          
1966          
1967          
1968          
1969          static  /*inline*/  void HalCC2430RadioP__CC2420SetIEEEAddr(ieee_mac_addr_t extAddress);
1970          //#line 475
1971          bool HalCC2430RadioP__receivedPacketTaskPosted = FALSE;
1972          //#line 475
1973          bool HalCC2430RadioP__flushBufferTaskPosted = FALSE;
1974          
1975          
1976          
1977          
1978          static  /*inline*/  void HalCC2430RadioP__InterruptTXDone__fired(void );
1979          //#line 492
1980          static  /*inline*/  void HalCC2430RadioP__sendPacketDoneTask__runTask(void );
1981          
1982          
1983          
1984          
1985          
1986          
1987          
1988          static  /*inline*/  void HalCC2430RadioP__InterruptFIFOP__fired(void );
1989          //#line 515
1990          uint8_t HalCC2430RadioP__frameLength = 0;
1991          //#line 515
1992          uint8_t HalCC2430RadioP__receivedPacketTaskRetries = 0;
1993          
1994          static  /*inline*/  void HalCC2430RadioP__receivedPacketTask__runTask(void );
1995          //#line 627
1996          static  /*inline*/  void HalCC2430RadioP__InterruptRFErr__fired(void );
1997          //#line 644
1998          static  /*inline*/  void HalCC2430RadioP__flushBufferTask__runTask(void );
1999          //#line 682
2000          static  /*inline*/  void HalCC2430RadioP__CC2430Reset(void );
2001          //#line 697
2002          static  /*inline*/  void HalCC2430RadioP__CC2430RFEnable(void );
2003          //#line 710
2004          static  /*inline*/  void HalCC2430RadioP__CC2430RFDisable(void );
2005          //#line 731
2006          static  /*inline*/  void HalCC2430RadioP__CC2430ExternalOscillator(void );
2007          
2008          
2009          
2010          
2011          
2012          
2013          
2014          
2015          
2016          
2017          static void HalCC2430RadioP__CC2430RxEnable(void );
2018          //#line 760
2019          static  /*inline*/  void HalCC2430RadioP__CC2430RxDisable(void );
2020          //#line 773
2021          static void HalCC2430RadioP__CC2430ChannelSet(uint8_t channel);
2022          //#line 789
2023          static  /*inline*/  void HalCC2430RadioP__CC2430PALevelSet(uint8_t new_power);
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 34  

2024          //#line 804
2025          static  /*inline*/  void HalCC2430RadioP__CC2430ControlSet(void );
2026          //#line 828
2027          static  /*inline*/  void HalCC2430RadioP__CC2430TxWait(void );
2028          //#line 846
2029          static   /*inline*/   void HalCC2430RadioP__wait(uint16_t u);
2030          //#line 870
2031          static  /*inline*/  void HalCC2430RadioP__StdOut__get(uint8_t _data);
2032          //# 61 "/opt/tinyos-2.1.2/tos/interfaces/GpioCapture.nc"
2033          static void HplCC2430InterruptsC__CaptureSFD__captured(uint16_t time);
2034          //# 68 "/opt/tinyos-2.1.2/tos/interfaces/GpioInterrupt.nc"
2035          static void HplCC2430InterruptsC__InterruptRFErr__fired(void );
2036          //#line 68
2037          static void HplCC2430InterruptsC__InterruptTXDone__fired(void );
2038          //#line 68
2039          static void HplCC2430InterruptsC__InterruptCCA__fired(void );
2040          //#line 68
2041          static void HplCC2430InterruptsC__InterruptFIFOP__fired(void );
2042          //# 117 "../HplCC2430InterruptsC.nc"
2043          static  /*inline*/  error_t HplCC2430InterruptsC__InterruptFIFOP__enableRisingEdge(void );
2044          //#line 117
2045          static error_t HplCC2430InterruptsC__InterruptFIFOP__disable(void );
2046          static  /*inline*/  error_t HplCC2430InterruptsC__InterruptTXDone__enableRisingEdge(void );
2047          
2048          
2049          
2050          
2051          
2052          
2053          
2054          static  /*inline*/  error_t HplCC2430InterruptsC__InterruptRFErr__enableRisingEdge(void );
2055          //#line 142
2056          void __vector_0(void )   /*__attribute((interrupt))*/ ;
2057          
2058          
2059          
2060          
2061          
2062          
2063          void __vector_16(void )   /*__attribute((interrupt))*/ ;
2064          //#line 200
2065          static  /*inline*/  void HplCC2430InterruptsC__CaptureSFD__default__captured(uint16_t time);
2066          
2067          static  /*inline*/  void HplCC2430InterruptsC__InterruptCCA__default__fired(void );
2068          //# 52 "/opt/tinyos-2.1.2/tos/lib/serial/SerialByteComm.nc"
2069          static error_t StdOutM__UART__put(uint8_t _data);
2070          //# 108 "/opt/tinyos-2.x-contrib/diku/common/lib/stdout/StdOut.nc"
2071          static void StdOutM__StdOut__get(uint8_t _data);
2072          //# 47 "/opt/tinyos-2.x-contrib/diku/common/lib/stdout/StdOutM.nc"
2073          char StdOutM__buffer[1000];
2074          char *StdOutM__bufferhead;
2075          char *StdOutM__buffertail;
2076          char *StdOutM__bufferend;
2077          int StdOutM__isOutputting;
2078          
2079          int StdOutM__count;
2080          
2081          
2082          static  /*inline*/  error_t StdOutM__Init__init(void );
2083          //#line 77
2084          static int StdOutM__StdOut__print(const char *str);
2085          //#line 520
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 35  

2086          static  /*inline*/  void StdOutM__UART__putDone(void );
2087          //#line 545
2088          static  /*inline*/  void StdOutM__UART__get(uint8_t _data);
2089          //# 58 "/opt/tinyos-2.1.2/tos/lib/serial/SerialByteComm.nc"
2090          static void HalCC2430SimpleUartP__uart0__get(uint8_t _data);
2091          
2092          
2093          
2094          
2095          
2096          static void HalCC2430SimpleUartP__uart0__putDone(void );
2097          //# 50 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/usart/HalCC2430SimpleUartP.nc"
2098          static  /*inline*/  error_t HalCC2430SimpleUartP__Init__init(void );
2099          //#line 130
2100          static  /*inline*/  error_t HalCC2430SimpleUartP__uart0__put(uint8_t _data);
2101          
2102          
2103          
2104          
2105          void __vector_2(void )   /*__attribute((interrupt))*/ ;
2106          //#line 154
2107          void __vector_7(void )   /*__attribute((interrupt))*/ ;
2108          //# 52 "/opt/tinyos-2.1.2/tos/system/RandomMlcgC.nc"
2109          uint32_t RandomMlcgC__seed;
2110          
2111          
2112          static  /*inline*/  error_t RandomMlcgC__Init__init(void );
2113          //# 46 "/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc"
2114          static void LedsP__Led0__makeOutput(void );
2115          //#line 40
2116          static void LedsP__Led0__set(void );
2117          
2118          
2119          
2120          
2121          
2122          static void LedsP__Led1__makeOutput(void );
2123          //#line 40
2124          static void LedsP__Led1__set(void );
2125          
2126          
2127          
2128          
2129          
2130          static void LedsP__Led2__makeOutput(void );
2131          //#line 40
2132          static void LedsP__Led2__set(void );
2133          //# 56 "/opt/tinyos-2.1.2/tos/system/LedsP.nc"
2134          static  /*inline*/  error_t LedsP__Init__init(void );
2135          //# 92 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/mcs51/pins/HplMcs51GeneralIOC.nc"
2136          static   /*inline*/   void HplMcs51GeneralIOC__P10__set(void );
2137          //#line 92
2138          static   /*inline*/   void HplMcs51GeneralIOC__P10__makeOutput(void );
2139          static   /*inline*/   void HplMcs51GeneralIOC__P11__set(void );
2140          //#line 93
2141          static   /*inline*/   void HplMcs51GeneralIOC__P11__makeOutput(void );
2142          //# 23 "/opt/tinyos-2.1.2/tos/system/NoPinC.nc"
2143          static  /*inline*/  void /*PlatformLedsC.NoPinC*/NoPinC__0__GeneralIO__set(void );
2144          
2145          
2146          
2147          static  /*inline*/  void /*PlatformLedsC.NoPinC*/NoPinC__0__GeneralIO__makeOutput(void );
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 36  

2148          //# 107 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/mcs51/mcs51hardware.h"
2149            /*inline*/    __nesc_atomic_t __nesc_atomic_start(void )
2150          //#line 107
2151          {
2152   1        __nesc_atomic_t tmp = EA;
2153   1      
2154   1      //#line 109
2155   1        EA = 0;
2156   1        return tmp;
2157   1      }
2158          
2159            /*inline*/    void __nesc_atomic_end(__nesc_atomic_t oldSreg)
2160          //#line 113
2161          {
2162   1        EA = oldSreg;
2163   1      }
2164          
2165          //# 124 "/opt/tinyos-2.1.2/tos/system/SchedulerBasicP.nc"
2166          static  /*inline*/  void SchedulerBasicP__Scheduler__init(void )
2167          {
2168   1        /* atomic removed: atomic calls only */
2169   1        {
2170   2          memset((void *)SchedulerBasicP__m_next, SchedulerBasicP__NO_TASK, sizeof SchedulerBasicP__m_next);
2171   2          SchedulerBasicP__m_head = SchedulerBasicP__NO_TASK;
2172   2          SchedulerBasicP__m_tail = SchedulerBasicP__NO_TASK;
2173   2        }
2174   1      }
2175          
2176          //# 57 "/opt/tinyos-2.1.2/tos/interfaces/Scheduler.nc"
2177           /*inline*/  static void RealMainP__Scheduler__init(void ){
2178   1      //#line 57
2179   1        SchedulerBasicP__Scheduler__init();
2180   1      //#line 57
2181   1      }
2182          //#line 57
2183          //# 23 "/opt/tinyos-2.1.2/tos/system/NoPinC.nc"
2184          static  /*inline*/  void /*PlatformLedsC.NoPinC*/NoPinC__0__GeneralIO__set(void )
2185          //#line 23
2186          {
2187   1      }
2188          
2189          //# 40 "/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc"
2190           /*inline*/  static void LedsP__Led2__set(void ){
2191   1      //#line 40
2192   1        /*PlatformLedsC.NoPinC*/NoPinC__0__GeneralIO__set();
2193   1      //#line 40
2194   1      }
2195          //#line 40
2196          //# 93 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/mcs51/pins/HplMcs51GeneralIOC.nc"
2197          static   /*inline*/   void HplMcs51GeneralIOC__P11__set(void )
2198          //#line 93
2199          {
2200   1      //#line 93
2201   1        P1_1 = 1;
2202   1      }
2203          
2204          //# 40 "/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc"
2205           /*inline*/  static void LedsP__Led1__set(void ){
2206   1      //#line 40
2207   1        HplMcs51GeneralIOC__P11__set();
2208   1      //#line 40
2209   1      }
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 37  

2210          //#line 40
2211          //# 92 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/mcs51/pins/HplMcs51GeneralIOC.nc"
2212          static   /*inline*/   void HplMcs51GeneralIOC__P10__set(void )
2213          //#line 92
2214          {
2215   1      //#line 92
2216   1        P1_0 = 1;
2217   1      }
2218          
2219          //# 40 "/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc"
2220           /*inline*/  static void LedsP__Led0__set(void ){
2221   1      //#line 40
2222   1        HplMcs51GeneralIOC__P10__set();
2223   1      //#line 40
2224   1      }
2225          //#line 40
2226          //# 27 "/opt/tinyos-2.1.2/tos/system/NoPinC.nc"
2227          static  /*inline*/  void /*PlatformLedsC.NoPinC*/NoPinC__0__GeneralIO__makeOutput(void )
2228          //#line 27
2229          {
2230   1      }
2231          
2232          //# 46 "/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc"
2233           /*inline*/  static void LedsP__Led2__makeOutput(void ){
2234   1      //#line 46
2235   1        /*PlatformLedsC.NoPinC*/NoPinC__0__GeneralIO__makeOutput();
2236   1      //#line 46
2237   1      }
2238          //#line 46
2239          //# 93 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/mcs51/pins/HplMcs51GeneralIOC.nc"
2240          static   /*inline*/   void HplMcs51GeneralIOC__P11__makeOutput(void )
2241          //#line 93
2242          {
2243   1      //#line 93
2244   1        P1_DIR |= 1 << 1;
2245   1      }
2246          
2247          //# 46 "/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc"
2248           /*inline*/  static void LedsP__Led1__makeOutput(void ){
2249   1      //#line 46
2250   1        HplMcs51GeneralIOC__P11__makeOutput();
2251   1      //#line 46
2252   1      }
2253          //#line 46
2254          //# 92 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/mcs51/pins/HplMcs51GeneralIOC.nc"
2255          static   /*inline*/   void HplMcs51GeneralIOC__P10__makeOutput(void )
2256          //#line 92
2257          {
2258   1      //#line 92
2259   1        P1_DIR |= 1 << 0;
2260   1      }
2261          
2262          //# 46 "/opt/tinyos-2.1.2/tos/interfaces/GeneralIO.nc"
2263           /*inline*/  static void LedsP__Led0__makeOutput(void ){
2264   1      //#line 46
2265   1        HplMcs51GeneralIOC__P10__makeOutput();
2266   1      //#line 46
2267   1      }
2268          //#line 46
2269          //# 56 "/opt/tinyos-2.1.2/tos/system/LedsP.nc"
2270          static  /*inline*/  error_t LedsP__Init__init(void )
2271          //#line 56
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 38  

2272          {
2273   1        /* atomic removed: atomic calls only */
2274   1      //#line 57
2275   1        {
2276   2          ;
2277   2          LedsP__Led0__makeOutput();
2278   2          LedsP__Led1__makeOutput();
2279   2          LedsP__Led2__makeOutput();
2280   2          LedsP__Led0__set();
2281   2          LedsP__Led1__set();
2282   2          LedsP__Led2__set();
2283   2        }
2284   1        return SUCCESS;
2285   1      }
2286          
2287          //# 62 "/opt/tinyos-2.1.2/tos/interfaces/Init.nc"
2288           /*inline*/  static error_t PlatformP__LedsInit__init(void ){
2289   1      //#line 62
2290   1        unsigned char __nesc_result;
2291   1      //#line 62
2292   1      
2293   1      //#line 62
2294   1        __nesc_result = LedsP__Init__init();
2295   1      //#line 62
2296   1      
2297   1      //#line 62
2298   1        return __nesc_result;
2299   1      //#line 62
2300   1      }
2301          //#line 62
2302          //# 48 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/platforms/cc2430em/PlatformP.nc"
2303          static  /*inline*/  error_t PlatformP__Init__init(void )
2304          //#line 48
2305          {
2306   1        uint8_t new_clkcon;
2307   1      
2308   1      //#line 88
2309   1        SLEEP = (SLEEP & ~CC2430_SLEEP_MODE_MASK) | CC2430_SLEEP_POWERMODE_0;
2310   1      
2311   1      
2312   1      
2313   1        SLEEP &= ~(1 << CC2430_SLEEP_OSC_PD);
2314   1        while (!(SLEEP & (1 << CC2430_SLEEP_XOSC_STB))) ;
2315   1      
2316   1        new_clkcon = 0x0;
2317   1      
2318   1        new_clkcon = (new_clkcon & ~CC2430_CLKCON_TICKSPD_MASK) | CC2430_TICKF_DIV_1;
2319   1      
2320   1      
2321   1        new_clkcon &= ~(1 << CC2430_CLKCON_OSC32K);
2322   1      
2323   1      
2324   1      
2325   1      
2326   1      
2327   1      
2328   1        new_clkcon &= ~(1 << CC2430_CLKCON_OSC);
2329   1      
2330   1        new_clkcon |= 1 << CC2430_CLKCON_TICKSPD;
2331   1      
2332   1        CLKCON = new_clkcon;
2333   1      //#line 137
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 39  

2334   1        PlatformP__LedsInit__init();
2335   1        return SUCCESS;
2336   1      }
2337          
2338          //# 62 "/opt/tinyos-2.1.2/tos/interfaces/Init.nc"
2339           /*inline*/  static error_t RealMainP__PlatformInit__init(void ){
2340   1      //#line 62
2341   1        unsigned char __nesc_result;
2342   1      //#line 62
2343   1      
2344   1      //#line 62
2345   1        __nesc_result = PlatformP__Init__init();
2346   1      //#line 62
2347   1      
2348   1      //#line 62
2349   1        return __nesc_result;
2350   1      //#line 62
2351   1      }
2352          //#line 62
2353          //# 65 "/opt/tinyos-2.1.2/tos/interfaces/Scheduler.nc"
2354           /*inline*/  static bool RealMainP__Scheduler__runNextTask(void ){
2355   1      //#line 65
2356   1        unsigned char __nesc_result;
2357   1      //#line 65
2358   1      
2359   1      //#line 65
2360   1        __nesc_result = SchedulerBasicP__Scheduler__runNextTask();
2361   1      //#line 65
2362   1      
2363   1      //#line 65
2364   1        return __nesc_result;
2365   1      //#line 65
2366   1      }
2367          //#line 65
2368          //# 54 "../PhyP.nc"
2369          static  /*inline*/  void PhyP__HALCC2420__sendPacketDone(uint8_t *packet, error_t result)
2370          //#line 54
2371          {
2372   1      }
*** WARNING C280 IN LINE 2369 OF APP.C: 'packet': unreferenced local variable
*** WARNING C280 IN LINE 2369 OF APP.C: 'result': unreferenced local variable
2373          
2374          //# 43 "../HALCC2420.nc"
2375           /*inline*/  static void HalCC2430RadioP__HALCC2420__sendPacketDone(uint8_t *packet, error_t result){
2376   1      //#line 43
2377   1        PhyP__HALCC2420__sendPacketDone(packet, result);
2378   1      //#line 43
2379   1      }
2380          //#line 43
2381          //# 492 "../HalCC2430RadioP.nc"
2382          static  /*inline*/  void HalCC2430RadioP__sendPacketDoneTask__runTask(void )
2383          //#line 492
2384          {
2385   1        HalCC2430RadioP__HALCC2420__sendPacketDone(HalCC2430RadioP__transmitPacketPtr, SUCCESS);
2386   1      }
2387          
2388          //# 34 "/opt/tinyos-2.x-contrib/diku/common/lib/stdout/StdOut.nc"
2389           /*inline*/  static int HalCC2430RadioP__StdOut__print(const char *str){
2390   1      //#line 34
2391   1        int __nesc_result;
2392   1      //#line 34
2393   1      
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 40  

2394   1      //#line 34
2395   1        __nesc_result = StdOutM__StdOut__print(str);
2396   1      //#line 34
2397   1      
2398   1      //#line 34
2399   1        return __nesc_result;
2400   1      //#line 34
2401   1      }
2402          //#line 34
2403          //# 61 "/opt/tinyos-2.1.2/tos/interfaces/GpioInterrupt.nc"
2404           /*inline*/  static error_t HalCC2430RadioP__InterruptFIFOP__disable(void ){
2405   1      //#line 61
2406   1        unsigned char __nesc_result;
2407   1      //#line 61
2408   1      
2409   1      //#line 61
2410   1        __nesc_result = HplCC2430InterruptsC__InterruptFIFOP__disable();
2411   1      //#line 61
2412   1      
2413   1      //#line 61
2414   1        return __nesc_result;
2415   1      //#line 61
2416   1      }
2417          //#line 61
2418          //# 760 "../HalCC2430RadioP.nc"
2419          static  /*inline*/  void HalCC2430RadioP__CC2430RxDisable(void )
2420          {
2421   1        RFST = 0xE5;
2422   1      
2423   1      
2424   1        HalCC2430RadioP__InterruptFIFOP__disable();
2425   1      
2426   1        HalCC2430RadioP__rxEnabled = FALSE;
2427   1      }
2428          
2429          //#line 644
2430          static  /*inline*/  void HalCC2430RadioP__flushBufferTask__runTask(void )
2431          {
2432   1        if (HalCC2430RadioP__rxEnabled) 
2433   1          {
2434   2      
2435   2            HalCC2430RadioP__CC2430RxDisable();
2436   2      
2437   2      
2438   2            RFST = 0xE6;
2439   2            RFST = 0xE6;
2440   2      
2441   2      
2442   2            HalCC2430RadioP__CC2430RxEnable();
2443   2          }
2444   1        else {
2445   2      
2446   2            RFST = 0xE6;
2447   2            RFST = 0xE6;
2448   2          }
2449   1      
2450   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
2451   2      //#line 664
2452   2          HalCC2430RadioP__flushBufferTaskPosted = FALSE;
2453   2      //#line 664
2454   2          __nesc_atomic_end(__nesc_atomic); }
2455   1      
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 41  

2456   1        HalCC2430RadioP__StdOut__print("MAC: Buffer flushed\r\n");
2457   1      }
2458          
2459          //# 117 "../HplCC2430InterruptsC.nc"
2460          static  /*inline*/  error_t HplCC2430InterruptsC__InterruptFIFOP__enableRisingEdge(void )
2461          //#line 117
2462          {
2463   1      //#line 117
2464   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
2465   2      //#line 117
2466   2          {
2467   3      //#line 117
2468   3            RFIM |= 1 << CC2430_RFIM_FIFOP;
2469   3      //#line 117
2470   3            RFIF &= ~(1 << CC2430_RFIF_FIFOP);
2471   3      //#line 117
2472   3            IEN2 |= 1 << CC2430_IEN2_RFIE;
2473   3          }
2474   2      //#line 118
2475   2          __nesc_atomic_end(__nesc_atomic); }
2476   1      //#line 117
2477   1        return SUCCESS;
2478   1      }
2479          
2480          //# 53 "/opt/tinyos-2.1.2/tos/interfaces/GpioInterrupt.nc"
2481           /*inline*/  static error_t HalCC2430RadioP__InterruptFIFOP__enableRisingEdge(void ){
2482   1      //#line 53
2483   1        unsigned char __nesc_result;
2484   1      //#line 53
2485   1      
2486   1      //#line 53
2487   1        __nesc_result = HplCC2430InterruptsC__InterruptFIFOP__enableRisingEdge();
2488   1      //#line 53
2489   1      
2490   1      //#line 53
2491   1        return __nesc_result;
2492   1      //#line 53
2493   1      }
2494          //#line 53
2495          //# 67 "/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc"
2496           /*inline*/  static error_t HalCC2430RadioP__flushBufferTask__postTask(void ){
2497   1      //#line 67
2498   1        unsigned char __nesc_result;
2499   1      //#line 67
2500   1      
2501   1      //#line 67
2502   1        __nesc_result = SchedulerBasicP__TaskBasic__postTask(HalCC2430RadioP__flushBufferTask);
2503   1      //#line 67
2504   1      
2505   1      //#line 67
2506   1        return __nesc_result;
2507   1      //#line 67
2508   1      }
2509          //#line 67
2510           /*inline*/  static error_t HalCC2430RadioP__receivedPacketTask__postTask(void ){
2511   1      //#line 67
2512   1        unsigned char __nesc_result;
2513   1      //#line 67
2514   1      
2515   1      //#line 67
2516   1        __nesc_result = SchedulerBasicP__TaskBasic__postTask(HalCC2430RadioP__receivedPacketTask);
2517   1      //#line 67
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 42  

2518   1      
2519   1      //#line 67
2520   1        return __nesc_result;
2521   1      //#line 67
2522   1      }
2523          //#line 67
2524          //# 57 "../PhyP.nc"
2525          static  /*inline*/  uint8_t *PhyP__HALCC2420__receivedPacket(uint8_t *packet)
2526          //#line 57
2527          {
2528   1      }
*** WARNING C173 IN LINE 2528 OF APP.C: missing return-expression
*** WARNING C280 IN LINE 2525 OF APP.C: 'packet': unreferenced local variable
2529          
2530          //# 53 "../HALCC2420.nc"
2531           /*inline*/  static uint8_t *HalCC2430RadioP__HALCC2420__receivedPacket(uint8_t *packet){
2532   1      //#line 53
2533   1        unsigned char *__nesc_result;
2534   1      //#line 53
2535   1      
2536   1      //#line 53
2537   1        __nesc_result = PhyP__HALCC2420__receivedPacket(packet);
2538   1      //#line 53
2539   1      
2540   1      //#line 53
2541   1        return __nesc_result;
2542   1      //#line 53
2543   1      }
2544          //#line 53
2545          //# 517 "../HalCC2430RadioP.nc"
2546          static  /*inline*/  void HalCC2430RadioP__receivedPacketTask__runTask(void )
2547          {
2548   1        uint8_t correlation;
2549   1      //#line 519
2550   1        uint8_t i;
2551   1      
2552   1      
2553   1      
2554   1      
2555   1        if (HalCC2430RadioP__frameLength == 0) 
2556   1          {
2557   2            HalCC2430RadioP__frameLength = RFD;
2558   2      
2559   2            if (HalCC2430RadioP__frameLength < 127) {
2560   3              HalCC2430RadioP__receivedPacketPtr[0] = HalCC2430RadioP__frameLength;
2561   3              }
2562   2            else 
2563   2      //#line 530
2564   2              {
2565   3      
2566   3      
2567   3                HalCC2430RadioP__flushBufferTask__postTask();
2568   3                { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
2569   4      //#line 534
2570   4                  HalCC2430RadioP__receivedPacketTaskPosted = FALSE;
2571   4      //#line 534
2572   4                  __nesc_atomic_end(__nesc_atomic); }
2573   3                HalCC2430RadioP__frameLength = 0;
2574   3                HalCC2430RadioP__receivedPacketTaskRetries = 0;
2575   3                return;
2576   3              }
2577   2          }
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 43  

2578   1      
2579   1      
2580   1        if (HalCC2430RadioP__frameLength > * (uint8_t xdata *)0xDF53) 
2581   1          {
2582   2      
2583   2      
2584   2      
2585   2            { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
2586   3      //#line 547
2587   3              {
2588   4                if (HalCC2430RadioP__flushBufferTaskPosted || HalCC2430RadioP__receivedPacketTaskRetries > 10) 
2589   4                  {
2590   5                    HalCC2430RadioP__flushBufferTask__postTask();
2591   5                    HalCC2430RadioP__receivedPacketTaskPosted = FALSE;
2592   5                    HalCC2430RadioP__frameLength = 0;
2593   5                    HalCC2430RadioP__receivedPacketTaskRetries = 0;
2594   5                  }
2595   4                else 
2596   4      //#line 554
2597   4                  {
2598   5                    HalCC2430RadioP__receivedPacketTask__postTask();
2599   5                    HalCC2430RadioP__receivedPacketTaskRetries++;
2600   5                  }
2601   4              }
2602   3      //#line 558
2603   3              __nesc_atomic_end(__nesc_atomic); }
2604   2      
2605   2            return;
2606   2          }
2607   1      
2608   1      
2609   1        HalCC2430RadioP__receivedPacketTaskRetries = 0;
2610   1      
2611   1      
2612   1        for (i = 0; i < HalCC2430RadioP__frameLength; i++) {
2613   2            if (* (uint8_t xdata *)0xDF53 > 0 && * (uint8_t xdata *)0xDF53 < 129) {
2614   3              HalCC2430RadioP__receivedPacketPtr[i + 1] = RFD;
2615   3              }
2616   2            else 
2617   2      //#line 570
2618   2              {
2619   3                HalCC2430RadioP__receivedPacketPtr[HalCC2430RadioP__frameLength] = 0;
2620   3                break;
2621   3              }
2622   2          }
2623   1      
2624   1      
2625   1        correlation = HalCC2430RadioP__receivedPacketPtr[HalCC2430RadioP__frameLength];
2626   1      
2627   1      
2628   1        HalCC2430RadioP__frameLength = 0;
2629   1      
2630   1      
2631   1      
2632   1      
2633   1      
2634   1      
2635   1        if (correlation & FCS_CRC_OK_MASK) 
2636   1          {
2637   2            HalCC2430RadioP__receivedPacketPtr = HalCC2430RadioP__HALCC2420__receivedPacket(HalCC2430RadioP__rec
             -eivedPacketPtr);
2638   2          }
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 44  

2639   1        else {
2640   2      
2641   2            HalCC2430RadioP__StdOut__print("MAC: CRC Failed\n\r");
2642   2      
2643   2      
2644   2            { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
2645   3      //#line 596
2646   3              HalCC2430RadioP__receivedPacketTaskPosted = FALSE;
2647   3      //#line 596
2648   3              __nesc_atomic_end(__nesc_atomic); }
2649   2            HalCC2430RadioP__flushBufferTask__postTask();
2650   2          }
2651   1      
2652   1      
2653   1      
2654   1      
2655   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
2656   2      //#line 603
2657   2          {
2658   3      
2659   3      
2660   3            if (* (uint8_t xdata *)0xDF53 > 0 && * (uint8_t xdata *)0xDF53 < 129) {
2661   4              HalCC2430RadioP__receivedPacketTask__postTask();
2662   4              }
2663   3            else {
2664   4                HalCC2430RadioP__receivedPacketTaskPosted = FALSE;
2665   4      
2666   4      
2667   4      
2668   4                if (HalCC2430RadioP__flushBufferTaskPosted) {
2669   5                  HalCC2430RadioP__flushBufferTask__postTask();
2670   5                  }
2671   4              }
2672   3          }
2673   2      //#line 618
2674   2          __nesc_atomic_end(__nesc_atomic); }
2675   1      
2676   1        HalCC2430RadioP__RFIF &= ~(1 << CC2430_RFIF_FIFOP);
2677   1      }
2678          
2679          //# 97 "/opt/tinyos-2.1.2/tos/system/SchedulerBasicP.nc"
2680          static  /*inline*/  bool SchedulerBasicP__isWaiting(uint8_t id)
2681          {
2682   1        return SchedulerBasicP__m_next[id] != SchedulerBasicP__NO_TASK || SchedulerBasicP__m_tail == id;
2683   1      }
2684          
2685          static  /*inline*/  bool SchedulerBasicP__pushTask(uint8_t id)
2686          {
2687   1        if (!SchedulerBasicP__isWaiting(id)) 
2688   1          {
2689   2            if (SchedulerBasicP__m_head == SchedulerBasicP__NO_TASK) 
2690   2              {
2691   3                SchedulerBasicP__m_head = id;
2692   3                SchedulerBasicP__m_tail = id;
2693   3              }
2694   2            else 
2695   2              {
2696   3                SchedulerBasicP__m_next[SchedulerBasicP__m_tail] = id;
2697   3                SchedulerBasicP__m_tail = id;
2698   3              }
2699   2            return TRUE;
2700   2          }
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 45  

2701   1        else 
2702   1          {
2703   2            return FALSE;
2704   2          }
2705   1      }
2706          
2707          //# 846 "../HalCC2430RadioP.nc"
2708          static   /*inline*/   void HalCC2430RadioP__wait(uint16_t u)
2709          {
2710   1        uint8_t j;
2711   1        uint16_t i;
2712   1      
2713   1        u = u >> 3;
2714   1      
2715   1      
2716   1      
2717   1        for (i = 0; i < u; i++) {
2718   2            for (j = 0; j < 32; ) {
2719   3                j++;
2720   3              }
2721   2          }
2722   1      }
2723          
2724          //#line 828
2725          static  /*inline*/  void HalCC2430RadioP__CC2430TxWait(void )
2726          {
2727   1        uint8_t i = 0;
2728   1      
2729   1        while (* (uint8_t xdata *)0xDF62 & (1 << CC2430_RFSTATUS_TX_ACTIVE) && i < 50) 
2730   1          {
2731   2            HalCC2430RadioP__wait(100);
2732   2            i++;
2733   2          }
2734   1      
2735   1        return;
2736   1      }
2737          
2738          //#line 325
2739          static  /*inline*/  void HalCC2430RadioP__setChannelTask__runTask(void )
2740          {
2741   1      
2742   1        HalCC2430RadioP__CC2430TxWait();
2743   1        if (HalCC2430RadioP__rxEnabled) 
2744   1          {
2745   2            HalCC2430RadioP__CC2430RxDisable();
2746   2      
2747   2            HalCC2430RadioP__CC2430ChannelSet(HalCC2430RadioP__currentChannel);
2748   2            HalCC2430RadioP__CC2430RxEnable();
2749   2          }
2750   1        else {
2751   2          HalCC2430RadioP__CC2430ChannelSet(HalCC2430RadioP__currentChannel);
2752   2          }
2753   1      }
2754          
2755          //#line 226
2756          static  /*inline*/  void HalCC2430RadioP__transmitTask__runTask(void )
2757          {
2758   1        bool oldRxEnabled;
2759   1        uint8_t i;
2760   1      //#line 229
2761   1        uint8_t status;
2762   1      //#line 229
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 46  

2763   1        uint8_t counter;
2764   1      
2765   1      
2766   1      
2767   1      
2768   1      
2769   1        oldRxEnabled = HalCC2430RadioP__rxEnabled;
2770   1        if (!HalCC2430RadioP__rxEnabled) 
2771   1          {
2772   2      
2773   2            HalCC2430RadioP__CC2430RxEnable();
2774   2          }
2775   1      
2776   1      
2777   1        HalCC2430RadioP__wait(128);
2778   1      
2779   1      
2780   1        if (!(* (uint8_t xdata *)0xDF62 & (1 << CC2430_RFSTATUS_CCA))) {
2781   2      
2782   2      
2783   2            if (!HalCC2430RadioP__rxEnabled) 
2784   2              {
2785   3      
2786   3                HalCC2430RadioP__CC2430RxDisable();
2787   3              }
2788   2      
2789   2            HalCC2430RadioP__HALCC2420__sendPacketDone(HalCC2430RadioP__transmitPacketPtr, CC2420_ERROR_CCA);
2790   2      
2791   2            return;
2792   2          }
2793   1      
2794   1      
2795   1      
2796   1      
2797   1      
2798   1      
2799   1      
2800   1        RFST = 0xE7;
2801   1      
2802   1      
2803   1        RFD = HalCC2430RadioP__transmitPacketPtr[0];
2804   1      
2805   1        for (i = 0; i < HalCC2430RadioP__transmitPacketPtr[0]; i++) {
2806   2            RFD = HalCC2430RadioP__transmitPacketPtr[i + 1];
2807   2          }
2808   1      
2809   1      
2810   1        i = 0;
2811   1        while (i++ < 3) 
2812   1          {
2813   2            RFST = 0xE3;
2814   2            counter = 0;
2815   2      
2816   2            do {
2817   3                status = * (uint8_t xdata *)0xDF62;
2818   3              }
2819   2            while (
2820   2      //#line 284
2821   2            !(status & (1 << CC2430_RFSTATUS_TX_ACTIVE)) && counter++ < 200);
2822   2      
2823   2            if (status & (1 << CC2430_RFSTATUS_TX_ACTIVE)) {
2824   3              break;
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 47  

2825   3              }
2826   2          }
2827   1      
2828   1      
2829   1      
2830   1        if (!(status & (1 << CC2430_RFSTATUS_TX_ACTIVE))) {
2831   2      
2832   2      
2833   2            RFST = 0xE7;
2834   2      
2835   2            HalCC2430RadioP__HALCC2420__sendPacketDone(HalCC2430RadioP__transmitPacketPtr, CC2420_ERROR_TX);
2836   2      
2837   2            return;
2838   2          }
2839   1      
2840   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
2841   2      //#line 303
2842   2          HalCC2430RadioP__transmitInProgress = TRUE;
2843   2      //#line 303
2844   2          __nesc_atomic_end(__nesc_atomic); }
2845   1      
2846   1        return;
2847   1      }
2848          
2849          //# 126 "../HplCC2430InterruptsC.nc"
2850          static  /*inline*/  error_t HplCC2430InterruptsC__InterruptRFErr__enableRisingEdge(void )
2851          //#line 126
2852          {
2853   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
2854   2      //#line 127
2855   2          {
2856   3            RFERRIF = 0;
2857   3            RFERRIE = 1;
2858   3          }
2859   2      //#line 130
2860   2          __nesc_atomic_end(__nesc_atomic); }
2861   1        return SUCCESS;
2862   1      }
2863          
2864          //# 53 "/opt/tinyos-2.1.2/tos/interfaces/GpioInterrupt.nc"
2865           /*inline*/  static error_t HalCC2430RadioP__InterruptRFErr__enableRisingEdge(void ){
2866   1      //#line 53
2867   1        unsigned char __nesc_result;
2868   1      //#line 53
2869   1      
2870   1      //#line 53
2871   1        __nesc_result = HplCC2430InterruptsC__InterruptRFErr__enableRisingEdge();
2872   1      //#line 53
2873   1      
2874   1      //#line 53
2875   1        return __nesc_result;
2876   1      //#line 53
2877   1      }
2878          //#line 53
2879          //# 118 "../HplCC2430InterruptsC.nc"
2880          static  /*inline*/  error_t HplCC2430InterruptsC__InterruptTXDone__enableRisingEdge(void )
2881          //#line 118
2882          {
2883   1      //#line 118
2884   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
2885   2      //#line 118
2886   2          {
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 48  

2887   3      //#line 118
2888   3            RFIM |= 1 << CC2430_RFIM_TXDONE;
2889   3      //#line 118
2890   3            RFIF &= ~(1 << CC2430_RFIF_TXDONE);
2891   3      //#line 118
2892   3            IEN2 |= 1 << CC2430_IEN2_RFIE;
2893   3          }
2894   2      //#line 119
2895   2          __nesc_atomic_end(__nesc_atomic); }
2896   1      //#line 118
2897   1        return SUCCESS;
2898   1      }
2899          
2900          //# 53 "/opt/tinyos-2.1.2/tos/interfaces/GpioInterrupt.nc"
2901           /*inline*/  static error_t HalCC2430RadioP__InterruptTXDone__enableRisingEdge(void ){
2902   1      //#line 53
2903   1        unsigned char __nesc_result;
2904   1      //#line 53
2905   1      
2906   1      //#line 53
2907   1        __nesc_result = HplCC2430InterruptsC__InterruptTXDone__enableRisingEdge();
2908   1      //#line 53
2909   1      
2910   1      //#line 53
2911   1        return __nesc_result;
2912   1      //#line 53
2913   1      }
2914          //#line 53
2915          //# 710 "../HalCC2430RadioP.nc"
2916          static  /*inline*/  void HalCC2430RadioP__CC2430RFDisable(void )
2917          {
2918   1        * (uint8_t xdata *)0xDF17 |= 1 << CC2430_RFPWR_RREG_RADIO_PD;
2919   1      }
2920          
2921          //#line 789
2922          static  /*inline*/  void HalCC2430RadioP__CC2430PALevelSet(uint8_t new_power)
2923          {
2924   1        uint16_t power;
2925   1      
2926   1        power = new_power * 0x1F;
2927   1        power /= 100;
2928   1      
2929   1        * (uint16_t xdata *)0xDF0A = (* (uint16_t xdata *)0xDF0A & ~0x1F) | (power & 0x1F);
2930   1      }
2931          
2932          
2933          
2934          
2935          
2936          
2937          static  /*inline*/  void HalCC2430RadioP__CC2430ControlSet(void )
2938          {
2939   1      
2940   1        * (uint8_t xdata *)0xDF02 &= ~(1 << CC2430_MDMCTRL0H_ADDR_DECODE);
2941   1      
2942   1      
2943   1      
2944   1        * (uint8_t xdata *)0xDF03 |= 1 << CC2430_MDMCTRL0L_AUTOCRC;
2945   1      
2946   1      
2947   1      
2948   1      
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 49  

2949   1      
2950   1        * (uint8_t xdata *)0xDF4F = 0x7F;
2951   1      
2952   1      
2953   1        * (uint16_t xdata *)0xDF0A = 0x050F;
2954   1      
2955   1        return;
2956   1      }
2957          
2958          //#line 446
2959          static  /*inline*/  void HalCC2430RadioP__CC2430SetPanid(uint16_t id)
2960          {
2961   1        * (uint16_t xdata *)0xDF4B = id;
2962   1      }
2963          
2964          static  /*inline*/  void HalCC2430RadioP__CC2430SetShortaddr(uint16_t shortAddr)
2965          {
2966   1        * (uint16_t xdata *)0xDF4D = shortAddr;
2967   1      }
2968          
2969          static  /*inline*/  void HalCC2430RadioP__CC2420SetIEEEAddr(ieee_mac_addr_t extAddress)
2970          {
2971   1        * (uint8_t xdata *)0xDF4A = extAddress[7];
2972   1        * (uint8_t xdata *)0xDF49 = extAddress[6];
2973   1        * (uint8_t xdata *)0xDF48 = extAddress[5];
2974   1        * (uint8_t xdata *)0xDF47 = extAddress[4];
2975   1        * (uint8_t xdata *)0xDF46 = extAddress[3];
2976   1        * (uint8_t xdata *)0xDF45 = extAddress[2];
2977   1        * (uint8_t xdata *)0xDF44 = extAddress[1];
2978   1        * (uint8_t xdata *)0xDF43 = extAddress[0];
2979   1      }
2980          
2981          //#line 731
2982          static  /*inline*/  void HalCC2430RadioP__CC2430ExternalOscillator(void )
2983          {
2984   1        SLEEP &= ~(1 << CC2430_SLEEP_OSC_PD);
2985   1        CLKCON &= ~(1 << CC2430_CLKCON_CLKSPD);
2986   1      
2987   1        while (!(SLEEP & (1 << CC2430_SLEEP_XOSC_STB))) ;
2988   1      }
2989          
2990          //#line 682
2991          static  /*inline*/  void HalCC2430RadioP__CC2430Reset(void )
2992          {
2993   1      
2994   1        * (uint8_t xdata *)0xDF17 &= ~(1 << CC2430_RFPWR_RREG_RADIO_PD);
2995   1        * (uint8_t xdata *)0xDF17 |= 1 << CC2430_RFPWR_RREG_RADIO_PD;
2996   1      
2997   1      
2998   1      
2999   1        while (HalCC2430RadioP__RFIF & (1 << CC2430_RFIF_RREG_ON)) {
3000   2          }
3001   1      }
3002          
3003          //#line 127
3004          static  /*inline*/  void HalCC2430RadioP__initTask__runTask(void )
3005          {
3006   1      
3007   1        HalCC2430RadioP__ieeeAddress[0] = 0x10;
3008   1        HalCC2430RadioP__ieeeAddress[1] = 0x3d;
3009   1        HalCC2430RadioP__ieeeAddress[2] = 0x23;
3010   1      
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 50  

3011   1      
3012   1        HalCC2430RadioP__ieeeAddress[3] = 0;
3013   1        HalCC2430RadioP__ieeeAddress[4] = 0;
3014   1        HalCC2430RadioP__ieeeAddress[5] = 0;
3015   1        HalCC2430RadioP__ieeeAddress[6] = TOS_NODE_ID >> 8;
3016   1        HalCC2430RadioP__ieeeAddress[7] = TOS_NODE_ID;
3017   1      
3018   1      
3019   1        HalCC2430RadioP__CC2430Reset();
3020   1      
3021   1      
3022   1        HalCC2430RadioP__CC2430ExternalOscillator();
3023   1      
3024   1      
3025   1      
3026   1      
3027   1      
3028   1      
3029   1        HalCC2430RadioP__CC2420SetIEEEAddr(HalCC2430RadioP__ieeeAddress);
3030   1      
3031   1      
3032   1        HalCC2430RadioP__shortAddress = ((uint16_t )HalCC2430RadioP__ieeeAddress[6] << 8) | HalCC2430RadioP__iee
             -eAddress[7];
3033   1        HalCC2430RadioP__CC2430SetShortaddr(HalCC2430RadioP__shortAddress);
3034   1      
3035   1      
3036   1        HalCC2430RadioP__panid = HalCC2430RadioP__shortAddress;
3037   1        HalCC2430RadioP__CC2430SetPanid(HalCC2430RadioP__panid);
3038   1      
3039   1      
3040   1      
3041   1      
3042   1      
3043   1        HalCC2430RadioP__CC2430ControlSet();
3044   1      
3045   1      
3046   1        HalCC2430RadioP__CC2430ChannelSet(CC2420_DEFAULT_CHANNEL);
3047   1      
3048   1      
3049   1        HalCC2430RadioP__CC2430PALevelSet(CC2420_DEFAULT_POWER);
3050   1      
3051   1      
3052   1      
3053   1      
3054   1        HalCC2430RadioP__CC2430RFDisable();
3055   1      
3056   1        HalCC2430RadioP__InterruptTXDone__enableRisingEdge();
3057   1        HalCC2430RadioP__InterruptRFErr__enableRisingEdge();
3058   1      }
3059          
3060          //# 148 "../PhyP.nc"
3061          static  /*inline*/  void PhyP__sendDone_task__runTask(void )
3062          //#line 148
3063          {
3064   1        error_t packetErr;
3065   1      
3066   1      //#line 150
3067   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
3068   2      //#line 150
3069   2          packetErr = PhyP__sendErr;
3070   2      //#line 150
3071   2          __nesc_atomic_end(__nesc_atomic); }
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 51  

3072   1      }
3073          
3074          //# 13 "TestStdControlP.nc"
3075          static  /*inline*/  void TestStdControlP__SplitControl__stopDone(error_t error)
3076          //#line 13
3077          {
3078   1      }
*** WARNING C280 IN LINE 3075 OF APP.C: 'error': unreferenced local variable
3079          
3080          //# 138 "/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc"
3081           /*inline*/  static void PhyP__SplitControl__stopDone(error_t error){
3082   1      //#line 138
3083   1        TestStdControlP__SplitControl__stopDone(error);
3084   1      //#line 138
3085   1      }
3086          //#line 138
3087          //# 155 "../PhyP.nc"
3088          static  /*inline*/  void PhyP__stopDone_task__runTask(void )
3089          //#line 155
3090          {
3091   1      
3092   1        PhyP__SplitControl__stopDone(SUCCESS);
3093   1      }
3094          
3095          //#line 145
3096          static  /*inline*/  void PhyP__startDone_task__runTask(void )
3097          //#line 145
3098          {
3099   1      }
3100          
3101          //# 69 "/opt/tinyos-2.1.2/tos/types/TinyError.h"
3102          static  /*inline*/   error_t ecombine(error_t r1, error_t r2)
3103          
3104          
3105          
3106          
3107          {
3108   1        return r1 == r2 ? r1 : FAIL;
3109   1      }
3110          
3111          //# 90 "../PhyP.nc"
3112          static  /*inline*/  error_t PhyP__Init__init(void )
3113          //#line 90
3114          {
3115   1      //#line 104
3116   1        return SUCCESS;
3117   1      }
3118          
3119          //# 67 "/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc"
3120           /*inline*/  static error_t HalCC2430RadioP__initTask__postTask(void ){
3121   1      //#line 67
3122   1        unsigned char __nesc_result;
3123   1      //#line 67
3124   1      
3125   1      //#line 67
3126   1        __nesc_result = SchedulerBasicP__TaskBasic__postTask(HalCC2430RadioP__initTask);
3127   1      //#line 67
3128   1      
3129   1      //#line 67
3130   1        return __nesc_result;
3131   1      //#line 67
3132   1      }
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 52  

3133          //#line 67
3134          //# 105 "../HalCC2430RadioP.nc"
3135          static  /*inline*/  error_t HalCC2430RadioP__Init__init(void )
3136          {
3137   1        HalCC2430RadioP__receivedPacketPtr = HalCC2430RadioP__receivedPacket;
3138   1      //#line 122
3139   1        HalCC2430RadioP__initTask__postTask();
3140   1      
3141   1        return SUCCESS;
3142   1      }
3143          
3144          //# 56 "/opt/tinyos-2.x-contrib/diku/common/lib/stdout/StdOutM.nc"
3145          static  /*inline*/  error_t StdOutM__Init__init(void )
3146          //#line 56
3147          {
3148   1        ;
3149   1        /* atomic removed: atomic calls only */
3150   1        {
3151   2          StdOutM__bufferhead = StdOutM__buffer;
3152   2          StdOutM__buffertail = StdOutM__buffer;
3153   2          StdOutM__bufferend = StdOutM__buffer + 1000;
3154   2          StdOutM__isOutputting = FALSE;
3155   2          StdOutM__count = 0;
3156   2        }
3157   1        return SUCCESS;
3158   1      }
3159          
3160          //# 50 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/usart/HalCC2430SimpleUartP.nc"
3161          static  /*inline*/  error_t HalCC2430SimpleUartP__Init__init(void )
3162          //#line 50
3163          {
3164   1      //#line 92
3165   1        PERCFG &= ~0x1u;
3166   1      //#line 105
3167   1        P0_ALT |= 0x0Cu;
3168   1      
3169   1      
3170   1      
3171   1      
3172   1        U0GCR = 230400 == 2400 ? 6 + ((CLKCON & (1 << CC2430_CLKCON_OSC)) >> CC2430_CLKCON_OSC) : 230400 == 4800
             - ? 7 + ((CLKCON & (1 << CC2430_CLKCON_OSC)) >> CC2430_CLKCON_OSC) : 230400 == 9600 ? 8 + ((CLKCON & (1 << CC2430_CLKCON_
             -OSC)) >> CC2430_CLKCON_OSC) : 230400 == 14400 ? 8 + ((CLKCON & (1 << CC2430_CLKCON_OSC)) >> CC2430_CLKCON_OSC) : 230400 
             -== 19200 ? 9 + ((CLKCON & (1 << CC2430_CLKCON_OSC)) >> CC2430_CLKCON_OSC) : 230400 == 28800 ? 9 + ((CLKCON & (1 << CC243
             -0_CLKCON_OSC)) >> CC2430_CLKCON_OSC) : 230400 == 38400 ? 10 + ((CLKCON & (1 << CC2430_CLKCON_OSC)) >> CC2430_CLKCON_OSC)
             - : 230400 == 57600 ? 10 + ((CLKCON & (1 << CC2430_CLKCON_OSC)) >> CC2430_CLKCON_OSC) : 230400 == 76800 ? 11 + ((CLKCON &
             - (1 << CC2430_CLKCON_OSC)) >> CC2430_CLKCON_OSC) : 230400 == 115200 ? 11 + ((CLKCON & (1 << CC2430_CLKCON_OSC)) >> CC243
             -0_CLKCON_OSC) : 230400 == 153600 ? 12 + ((CLKCON & (1 << CC2430_CLKCON_OSC)) >> CC2430_CLKCON_OSC) : 230400 == 230400 ? 
             -12 + ((CLKCON & (1 << CC2430_CLKCON_OSC)) >> CC2430_CLKCON_OSC) : 230400 == 307200 ? 13 + ((CLKCON & (1 << CC2430_CLKCON
             -_OSC)) >> CC2430_CLKCON_OSC) : 0;
3173   1      
3174   1      
3175   1        U0BAUD = 230400 == 2400 ? 59 : 230400 == 4800 ? 59 : 230400 == 9600 ? 59 : 230400 == 14400 ? 216 : 23040
             -0 == 19200 ? 59 : 230400 == 28800 ? 216 : 230400 == 38400 ? 59 : 230400 == 57600 ? 216 : 230400 == 76800 ? 59 : 230400 =
             -= 115200 ? 216 : 230400 == 153600 ? 59 : 230400 == 230400 ? 216 : 230400 == 307200 ? 59 : 0;
3176   1      
3177   1        U0CSR |= 0x80u | 0x40u;
3178   1        U0UCR |= 0x2u | 0x80u;
3179   1      
3180   1      
3181   1        UTX0IF = 0;
3182   1        URX0IF = 0;
3183   1      
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 53  

3184   1        URX0IE = 1;
3185   1      
3186   1      
3187   1        IEN2 |= 1 << 2;
3188   1      
3189   1        return SUCCESS;
3190   1      }
3191          
3192          //# 55 "/opt/tinyos-2.1.2/tos/system/RandomMlcgC.nc"
3193          static  /*inline*/  error_t RandomMlcgC__Init__init(void )
3194          //#line 55
3195          {
3196   1        /* atomic removed: atomic calls only */
3197   1      //#line 56
3198   1        RandomMlcgC__seed = (uint32_t )(TOS_NODE_ID + 1);
3199   1      
3200   1        return SUCCESS;
3201   1      }
3202          
3203          //# 62 "/opt/tinyos-2.1.2/tos/interfaces/Init.nc"
3204           /*inline*/  static error_t RealMainP__SoftwareInit__init(void ){
3205   1      //#line 62
3206   1        unsigned char __nesc_result;
3207   1      //#line 62
3208   1      
3209   1      //#line 62
3210   1        __nesc_result = RandomMlcgC__Init__init();
3211   1      //#line 62
3212   1        __nesc_result = ecombine(__nesc_result, HalCC2430SimpleUartP__Init__init());
3213   1      //#line 62
3214   1        __nesc_result = ecombine(__nesc_result, StdOutM__Init__init());
3215   1      //#line 62
3216   1        __nesc_result = ecombine(__nesc_result, HalCC2430RadioP__Init__init());
3217   1      //#line 62
3218   1        __nesc_result = ecombine(__nesc_result, PhyP__Init__init());
3219   1      //#line 62
3220   1      
3221   1      //#line 62
3222   1        return __nesc_result;
3223   1      //#line 62
3224   1      }
3225          //#line 62
3226          //# 10 "TestStdControlP.nc"
3227          static  /*inline*/  void TestStdControlP__SplitControl__startDone(error_t error)
3228          //#line 10
3229          {
3230   1      }
*** WARNING C280 IN LINE 3227 OF APP.C: 'error': unreferenced local variable
3231          
3232          //# 113 "/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc"
3233           /*inline*/  static void PhyP__SplitControl__startDone(error_t error){
3234   1      //#line 113
3235   1        TestStdControlP__SplitControl__startDone(error);
3236   1      //#line 113
3237   1      }
3238          //#line 113
3239          //# 697 "../HalCC2430RadioP.nc"
3240          static  /*inline*/  void HalCC2430RadioP__CC2430RFEnable(void )
3241          {
3242   1      
3243   1        * (uint8_t xdata *)0xDF17 = 0x04;
3244   1      
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 54  

3245   1      
3246   1      
3247   1      
3248   1        while (* (uint8_t xdata *)0xDF17 & 0x10) {
3249   2          }
3250   1      }
3251          
3252          //#line 186
3253          static  /*inline*/  error_t HalCC2430RadioP__HALCC2420Control__start(void )
3254          {
3255   1      
3256   1        HalCC2430RadioP__CC2430RFEnable();
3257   1      
3258   1      
3259   1        HalCC2430RadioP__CC2430RxEnable();
3260   1      
3261   1        return SUCCESS;
3262   1      }
3263          
3264          //# 95 "/opt/tinyos-2.1.2/tos/interfaces/StdControl.nc"
3265           /*inline*/  static error_t PhyP__HALCC2420Control__start(void ){
3266   1      //#line 95
3267   1        unsigned char __nesc_result;
3268   1      //#line 95
3269   1      
3270   1      //#line 95
3271   1        __nesc_result = HalCC2430RadioP__HALCC2420Control__start();
3272   1      //#line 95
3273   1      
3274   1      //#line 95
3275   1        return __nesc_result;
3276   1      //#line 95
3277   1      }
3278          //#line 95
3279          //# 109 "../PhyP.nc"
3280          static  /*inline*/  error_t PhyP__SplitControl__start(void )
3281          //#line 109
3282          {
3283   1      
3284   1      
3285   1      
3286   1      
3287   1        PhyP__HALCC2420Control__start();
3288   1        PhyP__SplitControl__startDone(SUCCESS);
3289   1      
3290   1        return SUCCESS;
3291   1      }
3292          
3293          //# 104 "/opt/tinyos-2.1.2/tos/interfaces/SplitControl.nc"
3294           /*inline*/  static error_t TestStdControlP__SplitControl__start(void ){
3295   1      //#line 104
3296   1        unsigned char __nesc_result;
3297   1      //#line 104
3298   1      
3299   1      //#line 104
3300   1        __nesc_result = PhyP__SplitControl__start();
3301   1      //#line 104
3302   1      
3303   1      //#line 104
3304   1        return __nesc_result;
3305   1      //#line 104
3306   1      }
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 55  

3307          //#line 104
3308          //# 6 "TestStdControlP.nc"
3309          static  /*inline*/  void TestStdControlP__Boot__booted(void )
3310          //#line 6
3311          {
3312   1        TestStdControlP__SplitControl__start();
3313   1      }
3314          
3315          //# 60 "/opt/tinyos-2.1.2/tos/interfaces/Boot.nc"
3316           /*inline*/  static void RealMainP__Boot__booted(void ){
3317   1      //#line 60
3318   1        TestStdControlP__Boot__booted();
3319   1      //#line 60
3320   1      }
3321          //#line 60
3322          //# 104 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/mcs51/mcs51hardware.h"
3323          static   /*inline*/   void __nesc_disable_interrupt()
3324          //#line 104
3325          {
3326   1      //#line 104
3327   1        EA = 0;
3328   1      }
3329          
3330          //#line 105
3331          static   /*inline*/   void __nesc_enable_interrupt()
3332          //#line 105
3333          {
3334   1      //#line 105
3335   1        EA = 1;
3336   1      }
3337          
3338          //# 51 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/McuSleepC.nc"
3339          static  /*inline*/  void McuSleepC__McuSleep__sleep(void )
3340          //#line 51
3341          {
3342   1      
3343   1        __nesc_enable_interrupt();
3344   1      
3345   1      
3346   1      
3347   1      
3348   1      
3349   1      
3350   1        SLEEP = (SLEEP & ~CC2430_SLEEP_MODE_MASK) | CC2430_SLEEP_POWERMODE_0;
3351   1      
3352   1        __nesc_disable_interrupt();
3353   1      }
3354          
3355          //# 76 "/opt/tinyos-2.1.2/tos/interfaces/McuSleep.nc"
3356           /*inline*/  static void SchedulerBasicP__McuSleep__sleep(void ){
3357   1      //#line 76
3358   1        McuSleepC__McuSleep__sleep();
3359   1      //#line 76
3360   1      }
3361          //#line 76
3362          //# 78 "/opt/tinyos-2.1.2/tos/system/SchedulerBasicP.nc"
3363          static   /*inline*/   uint8_t SchedulerBasicP__popTask(void )
3364          {
3365   1        if (SchedulerBasicP__m_head != SchedulerBasicP__NO_TASK) 
3366   1          {
3367   2            uint8_t id = SchedulerBasicP__m_head;
3368   2      
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 56  

3369   2      //#line 83
3370   2            SchedulerBasicP__m_head = SchedulerBasicP__m_next[SchedulerBasicP__m_head];
3371   2            if (SchedulerBasicP__m_head == SchedulerBasicP__NO_TASK) 
3372   2              {
3373   3                SchedulerBasicP__m_tail = SchedulerBasicP__NO_TASK;
3374   3              }
3375   2            SchedulerBasicP__m_next[id] = SchedulerBasicP__NO_TASK;
3376   2            return id;
3377   2          }
3378   1        else 
3379   1          {
3380   2            return SchedulerBasicP__NO_TASK;
3381   2          }
3382   1      }
3383          
3384          //#line 149
3385          static  /*inline*/  void SchedulerBasicP__Scheduler__taskLoop(void )
3386          {
3387   1        for (; ; ) 
3388   1          {
3389   2            uint8_t nextTask;
3390   2      
3391   2            { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
3392   3              {
3393   4                while ((nextTask = SchedulerBasicP__popTask()) == SchedulerBasicP__NO_TASK) 
3394   4                  {
3395   5                    SchedulerBasicP__McuSleep__sleep();
3396   5                  }
3397   4              }
3398   3      //#line 161
3399   3              __nesc_atomic_end(__nesc_atomic); }
3400   2            SchedulerBasicP__TaskBasic__runTask(nextTask);
3401   2          }
3402   1      }
3403          
3404          //# 72 "/opt/tinyos-2.1.2/tos/interfaces/Scheduler.nc"
3405           /*inline*/  static void RealMainP__Scheduler__taskLoop(void ){
3406   1      //#line 72
3407   1        SchedulerBasicP__Scheduler__taskLoop();
3408   1      //#line 72
3409   1      }
3410          //#line 72
3411          //# 627 "../HalCC2430RadioP.nc"
3412          static  /*inline*/  void HalCC2430RadioP__InterruptRFErr__fired(void )
3413          //#line 627
3414          {
3415   1      
3416   1        HalCC2430RadioP__StdOut__print("MAC: Buffer overrun\r\n");
3417   1      
3418   1      
3419   1      
3420   1      
3421   1      
3422   1        if (!HalCC2430RadioP__receivedPacketTaskPosted && !HalCC2430RadioP__flushBufferTaskPosted) 
3423   1          {
3424   2            HalCC2430RadioP__flushBufferTask__postTask();
3425   2          }
3426   1      
3427   1        HalCC2430RadioP__flushBufferTaskPosted = TRUE;
3428   1      }
3429          
3430          //# 68 "/opt/tinyos-2.1.2/tos/interfaces/GpioInterrupt.nc"
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 57  

3431           /*inline*/  static void HplCC2430InterruptsC__InterruptRFErr__fired(void ){
3432   1      //#line 68
3433   1        HalCC2430RadioP__InterruptRFErr__fired();
3434   1      //#line 68
3435   1      }
3436          //#line 68
3437          //# 202 "../HplCC2430InterruptsC.nc"
3438          static  /*inline*/  void HplCC2430InterruptsC__InterruptCCA__default__fired(void )
3439          //#line 202
3440          {
3441   1      }
3442          
3443          //# 68 "/opt/tinyos-2.1.2/tos/interfaces/GpioInterrupt.nc"
3444           /*inline*/  static void HplCC2430InterruptsC__InterruptCCA__fired(void ){
3445   1      //#line 68
3446   1        HplCC2430InterruptsC__InterruptCCA__default__fired();
3447   1      //#line 68
3448   1      }
3449          //#line 68
3450          //# 500 "../HalCC2430RadioP.nc"
3451          static  /*inline*/  void HalCC2430RadioP__InterruptFIFOP__fired(void )
3452          //#line 500
3453          {
3454   1      
3455   1      
3456   1      
3457   1      
3458   1      
3459   1        if (!HalCC2430RadioP__receivedPacketTaskPosted && * (uint8_t xdata *)0xDF53 > 0) {
3460   2      
3461   2            HalCC2430RadioP__receivedPacketTaskPosted = TRUE;
3462   2            HalCC2430RadioP__receivedPacketTask__postTask();
3463   2          }
3464   1      }
3465          
3466          //# 68 "/opt/tinyos-2.1.2/tos/interfaces/GpioInterrupt.nc"
3467           /*inline*/  static void HplCC2430InterruptsC__InterruptFIFOP__fired(void ){
3468   1      //#line 68
3469   1        HalCC2430RadioP__InterruptFIFOP__fired();
3470   1      //#line 68
3471   1      }
3472          //#line 68
3473          //# 67 "/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc"
3474           /*inline*/  static error_t HalCC2430RadioP__sendPacketDoneTask__postTask(void ){
3475   1      //#line 67
3476   1        unsigned char __nesc_result;
3477   1      //#line 67
3478   1      
3479   1      //#line 67
3480   1        __nesc_result = SchedulerBasicP__TaskBasic__postTask(HalCC2430RadioP__sendPacketDoneTask);
3481   1      //#line 67
3482   1      
3483   1      //#line 67
3484   1        return __nesc_result;
3485   1      //#line 67
3486   1      }
3487          //#line 67
3488          //# 480 "../HalCC2430RadioP.nc"
3489          static  /*inline*/  void HalCC2430RadioP__InterruptTXDone__fired(void )
3490          {
3491   1      
3492   1        if (HalCC2430RadioP__transmitInProgress) {
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 58  

3493   2            HalCC2430RadioP__transmitInProgress = FALSE;
3494   2            HalCC2430RadioP__sendPacketDoneTask__postTask();
3495   2          }
3496   1        else 
3497   1      //#line 486
3498   1          {
3499   2            HalCC2430RadioP__StdOut__print("MAC: Unscheduled transmit\n");
3500   2          }
3501   1      }
3502          
3503          //# 68 "/opt/tinyos-2.1.2/tos/interfaces/GpioInterrupt.nc"
3504           /*inline*/  static void HplCC2430InterruptsC__InterruptTXDone__fired(void ){
3505   1      //#line 68
3506   1        HalCC2430RadioP__InterruptTXDone__fired();
3507   1      //#line 68
3508   1      }
3509          //#line 68
3510          //# 200 "../HplCC2430InterruptsC.nc"
3511          static  /*inline*/  void HplCC2430InterruptsC__CaptureSFD__default__captured(uint16_t time)
3512          //#line 200
3513          {
3514   1      }
*** WARNING C280 IN LINE 3511 OF APP.C: 'time': unreferenced local variable
3515          
3516          //# 61 "/opt/tinyos-2.1.2/tos/interfaces/GpioCapture.nc"
3517           /*inline*/  static void HplCC2430InterruptsC__CaptureSFD__captured(uint16_t time){
3518   1      //#line 61
3519   1        HplCC2430InterruptsC__CaptureSFD__default__captured(time);
3520   1      //#line 61
3521   1      }
3522          //#line 61
3523          //# 870 "../HalCC2430RadioP.nc"
3524          static  /*inline*/  void HalCC2430RadioP__StdOut__get(uint8_t _data)
3525          {
3526   1      }
*** WARNING C280 IN LINE 3524 OF APP.C: '_data': unreferenced local variable
3527          
3528          //# 108 "/opt/tinyos-2.x-contrib/diku/common/lib/stdout/StdOut.nc"
3529           /*inline*/  static void StdOutM__StdOut__get(uint8_t _data){
3530   1      //#line 108
3531   1        HalCC2430RadioP__StdOut__get(_data);
3532   1      //#line 108
3533   1      }
3534          //#line 108
3535          //# 545 "/opt/tinyos-2.x-contrib/diku/common/lib/stdout/StdOutM.nc"
3536          static  /*inline*/  void StdOutM__UART__get(uint8_t _data)
3537          //#line 545
3538          {
3539   1        StdOutM__StdOut__get(_data);
3540   1        return;
3541   1      }
3542          
3543          //# 58 "/opt/tinyos-2.1.2/tos/lib/serial/SerialByteComm.nc"
3544           /*inline*/  static void HalCC2430SimpleUartP__uart0__get(uint8_t _data){
3545   1      //#line 58
3546   1        StdOutM__UART__get(_data);
3547   1      //#line 58
3548   1      }
3549          //#line 58
3550          //# 130 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/usart/HalCC2430SimpleUartP.nc"
3551          static  /*inline*/  error_t HalCC2430SimpleUartP__uart0__put(uint8_t _data)
3552          //#line 130
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 59  

3553          {
3554   1        U0BUF = _data;
3555   1        return SUCCESS;
3556   1      }
3557          
3558          //# 52 "/opt/tinyos-2.1.2/tos/lib/serial/SerialByteComm.nc"
3559           /*inline*/  static error_t StdOutM__UART__put(uint8_t _data){
3560   1      //#line 52
3561   1        unsigned char __nesc_result;
3562   1      //#line 52
3563   1      
3564   1      //#line 52
3565   1        __nesc_result = HalCC2430SimpleUartP__uart0__put(_data);
3566   1      //#line 52
3567   1      
3568   1      //#line 52
3569   1        return __nesc_result;
3570   1      //#line 52
3571   1      }
3572          //#line 52
3573          //# 520 "/opt/tinyos-2.x-contrib/diku/common/lib/stdout/StdOutM.nc"
3574          static  /*inline*/  void StdOutM__UART__putDone(void )
3575          //#line 520
3576          {
3577   1      
3578   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
3579   2      //#line 522
3580   2          {
3581   3      
3582   3            ++StdOutM__bufferhead;
3583   3            ++StdOutM__count;
3584   3            if (StdOutM__bufferhead == StdOutM__bufferend) {
3585   4                StdOutM__bufferhead = StdOutM__buffer;
3586   4              }
3587   3      
3588   3            if (StdOutM__bufferhead != StdOutM__buffertail) {
3589   4      
3590   4                StdOutM__UART__put(*StdOutM__bufferhead);
3591   4                StdOutM__isOutputting = TRUE;
3592   4              }
3593   3            else 
3594   3      //#line 534
3595   3              {
3596   4                StdOutM__isOutputting = FALSE;
3597   4              }
3598   3          }
3599   2      //#line 537
3600   2          __nesc_atomic_end(__nesc_atomic); }
3601   1        return;
3602   1      }
3603          
3604          //# 64 "/opt/tinyos-2.1.2/tos/lib/serial/SerialByteComm.nc"
3605           /*inline*/  static void HalCC2430SimpleUartP__uart0__putDone(void ){
3606   1      //#line 64
3607   1        StdOutM__UART__putDone();
3608   1      //#line 64
3609   1      }
3610          //#line 64
3611          //# 63 "/opt/tinyos-2.1.2/tos/system/RealMainP.nc"
3612            int main(void )
3613          //#line 63
3614          {
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 60  

3615   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
3616   2          {
3617   3      
3618   3      
3619   3      
3620   3      
3621   3      
3622   3            {
3623   4            }
3624   3      //#line 71
3625   3            ;
3626   3      
3627   3            RealMainP__Scheduler__init();
3628   3      
3629   3      
3630   3      
3631   3      
3632   3      
3633   3            RealMainP__PlatformInit__init();
3634   3            while (RealMainP__Scheduler__runNextTask()) ;
3635   3      
3636   3      
3637   3      
3638   3      
3639   3      
3640   3            RealMainP__SoftwareInit__init();
3641   3            while (RealMainP__Scheduler__runNextTask()) ;
3642   3          }
3643   2      //#line 88
3644   2          __nesc_atomic_end(__nesc_atomic); }
3645   1      
3646   1      
3647   1        __nesc_enable_interrupt();
3648   1      
3649   1        RealMainP__Boot__booted();
3650   1      
3651   1      
3652   1        RealMainP__Scheduler__taskLoop();
3653   1      
3654   1      
3655   1      
3656   1      
3657   1        return -1;
3658   1      }
3659          
3660          //# 134 "/opt/tinyos-2.1.2/tos/system/SchedulerBasicP.nc"
3661          static bool SchedulerBasicP__Scheduler__runNextTask(void )
3662          {
3663   1        uint8_t nextTask;
3664   1      
3665   1        /* atomic removed: atomic calls only */
3666   1      //#line 138
3667   1        {
3668   2          nextTask = SchedulerBasicP__popTask();
3669   2          if (nextTask == SchedulerBasicP__NO_TASK) 
3670   2            {
3671   3              {
3672   4                unsigned char __nesc_temp = 
3673   4      //#line 142
3674   4                FALSE;
3675   4      
3676   4      //#line 142
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 61  

3677   4                return __nesc_temp;
3678   4              }
3679   3            }
3680   2        }
3681   1      //#line 145
3682   1        SchedulerBasicP__TaskBasic__runTask(nextTask);
3683   1        return TRUE;
3684   1      }
3685          
3686          //#line 175
3687          static void SchedulerBasicP__TaskBasic__default__runTask(uint8_t id)
3688          {
3689   1      }
*** WARNING C280 IN LINE 3687 OF APP.C: 'id': unreferenced local variable
3690          
3691          //# 75 "/opt/tinyos-2.1.2/tos/interfaces/TaskBasic.nc"
3692          static void SchedulerBasicP__TaskBasic__runTask(uint8_t arg_0x2ab5a42bc3c8){
3693   1      //#line 75
3694   1        switch (arg_0x2ab5a42bc3c8) {
3695   2      //#line 75
3696   2          case PhyP__startDone_task:
3697   2      //#line 75
3698   2            PhyP__startDone_task__runTask();
3699   2      //#line 75
3700   2            break;
3701   2      //#line 75
3702   2          case PhyP__stopDone_task:
3703   2      //#line 75
3704   2            PhyP__stopDone_task__runTask();
3705   2      //#line 75
3706   2            break;
3707   2      //#line 75
3708   2          case PhyP__sendDone_task:
3709   2      //#line 75
3710   2            PhyP__sendDone_task__runTask();
3711   2      //#line 75
3712   2            break;
3713   2      //#line 75
3714   2          case HalCC2430RadioP__initTask:
3715   2      //#line 75
3716   2            HalCC2430RadioP__initTask__runTask();
3717   2      //#line 75
3718   2            break;
3719   2      //#line 75
3720   2          case HalCC2430RadioP__transmitTask:
3721   2      //#line 75
3722   2            HalCC2430RadioP__transmitTask__runTask();
3723   2      //#line 75
3724   2            break;
3725   2      //#line 75
3726   2          case HalCC2430RadioP__setChannelTask:
3727   2      //#line 75
3728   2            HalCC2430RadioP__setChannelTask__runTask();
3729   2      //#line 75
3730   2            break;
3731   2      //#line 75
3732   2          case HalCC2430RadioP__receivedPacketTask:
3733   2      //#line 75
3734   2            HalCC2430RadioP__receivedPacketTask__runTask();
3735   2      //#line 75
3736   2            break;
3737   2      //#line 75
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 62  

3738   2          case HalCC2430RadioP__flushBufferTask:
3739   2      //#line 75
3740   2            HalCC2430RadioP__flushBufferTask__runTask();
3741   2      //#line 75
3742   2            break;
3743   2      //#line 75
3744   2          case HalCC2430RadioP__sendPacketDoneTask:
3745   2      //#line 75
3746   2            HalCC2430RadioP__sendPacketDoneTask__runTask();
3747   2      //#line 75
3748   2            break;
3749   2      //#line 75
3750   2          default:
3751   2      //#line 75
3752   2            SchedulerBasicP__TaskBasic__default__runTask(arg_0x2ab5a42bc3c8);
3753   2      //#line 75
3754   2            break;
3755   2      //#line 75
3756   2          }
3757   1      //#line 75
3758   1      }
3759          //#line 75
3760          //# 117 "../HplCC2430InterruptsC.nc"
3761          static error_t HplCC2430InterruptsC__InterruptFIFOP__disable(void )
3762          //#line 117
3763          {
3764   1      //#line 117
3765   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
3766   2      //#line 117
3767   2          {
3768   3      //#line 117
3769   3            RFIM &= ~(1 << CC2430_RFIM_FIFOP);
3770   3          }
3771   2      //#line 118
3772   2          __nesc_atomic_end(__nesc_atomic); }
3773   1      //#line 117
3774   1        return SUCCESS;
3775   1      }
3776          
3777          //# 742 "../HalCC2430RadioP.nc"
3778          static void HalCC2430RadioP__CC2430RxEnable(void )
3779          {
3780   1      
3781   1        RFST = 0xE6;
3782   1        RFST = 0xE6;
3783   1      
3784   1      
3785   1        HalCC2430RadioP__InterruptFIFOP__enableRisingEdge();
3786   1      
3787   1      
3788   1        RFST = 0xE2;
3789   1      
3790   1        HalCC2430RadioP__rxEnabled = TRUE;
3791   1      }
3792          
3793          //# 77 "/opt/tinyos-2.x-contrib/diku/common/lib/stdout/StdOutM.nc"
3794          static int StdOutM__StdOut__print(const char *str)
3795          //#line 77
3796          {
3797   1      
3798   1        int na_countret;
3799   1      
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 63  

3800   1      //#line 80
3801   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
3802   2      //#line 80
3803   2          {
3804   3            bool return_flag = FALSE;
3805   3            int countret = 0;
3806   3      
3807   3      //#line 83
3808   3            ;
3809   3      
3810   3      
3811   3            if (StdOutM__buffertail >= StdOutM__bufferhead) {
3812   4                while (StdOutM__buffertail < StdOutM__bufferend && *str != 0) {
3813   5      
3814   5                    *StdOutM__buffertail = *str;
3815   5                    ++StdOutM__buffertail;
3816   5      
3817   5                    ++str;
3818   5                    ++countret;
3819   5                  }
3820   4      //#line 94
3821   4                ;
3822   4      
3823   4                if (StdOutM__buffertail == StdOutM__bufferend) {
3824   5                    StdOutM__buffertail = StdOutM__buffer;
3825   5                  }
3826   4                else 
3827   4      //#line 98
3828   4                  {
3829   5      
3830   5                    if (!StdOutM__isOutputting) {
3831   6      
3832   6                        StdOutM__UART__put(*StdOutM__bufferhead);
3833   6                        StdOutM__isOutputting = TRUE;
3834   6                      }
3835   5                    return_flag = TRUE;
3836   5                  }
3837   4              }
3838   3      
3839   3      
3840   3      
3841   3            if (!return_flag) {
3842   4      
3843   4      
3844   4                while (StdOutM__buffertail < StdOutM__bufferhead && *str != 0) {
3845   5                    *StdOutM__buffertail = *str;
3846   5                    ++StdOutM__buffertail;
3847   5                    ++str;
3848   5                    ++countret;
3849   5                  }
3850   4      //#line 119
3851   4                ;
3852   4      
3853   4                if (!StdOutM__isOutputting) {
3854   5                    StdOutM__UART__put(*StdOutM__bufferhead);
3855   5                    StdOutM__isOutputting = TRUE;
3856   5                  }
3857   4      
3858   4                if (StdOutM__buffertail == StdOutM__bufferhead) {
3859   5                    if (!StdOutM__isOutputting) {
3860   6      
3861   6                        StdOutM__UART__put(*StdOutM__bufferhead);
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 64  

3862   6                        StdOutM__isOutputting = TRUE;
3863   6                      }
3864   5                    return_flag = TRUE;
3865   5                  }
3866   4              }
3867   3      
3868   3      
3869   3            if (!return_flag) {
3870   4      
3871   4                if (!StdOutM__isOutputting) {
3872   5      
3873   5                    StdOutM__UART__put(*StdOutM__bufferhead);
3874   5                    StdOutM__isOutputting = TRUE;
3875   5                  }
3876   4                return_flag = TRUE;
3877   4              }
3878   3      
3879   3            na_countret = countret;
3880   3          }
3881   2      //#line 148
3882   2          __nesc_atomic_end(__nesc_atomic); }
3883   1      
3884   1        return na_countret;
3885   1      }
3886          
3887          //# 170 "/opt/tinyos-2.1.2/tos/system/SchedulerBasicP.nc"
3888          static error_t SchedulerBasicP__TaskBasic__postTask(uint8_t id)
3889          {
3890   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
3891   2      //#line 172
3892   2          {
3893   3      //#line 172
3894   3            {
3895   4              unsigned char __nesc_temp = 
3896   4      //#line 172
3897   4              SchedulerBasicP__pushTask(id) ? SUCCESS : EBUSY;
3898   4      
3899   4              {
3900   5      //#line 172
3901   5                __nesc_atomic_end(__nesc_atomic); 
3902   5      //#line 172
3903   5                return __nesc_temp;
3904   5              }
3905   4            }
3906   3          }
3907   2      //#line 175
3908   2          __nesc_atomic_end(__nesc_atomic); }
3909   1      }
3910          
3911          //# 773 "../HalCC2430RadioP.nc"
3912          static void HalCC2430RadioP__CC2430ChannelSet(uint8_t channel)
3913          {
3914   1        uint16_t freq;
3915   1      
3916   1      
3917   1        freq = (uint16_t )channel - 11;
3918   1        freq *= 5;
3919   1        freq += 357;
3920   1        freq |= 0x4000;
3921   1      
3922   1        * (uint16_t xdata *)0xDF10 = freq;
3923   1      }
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 65  

3924          
3925          //# 142 "../HplCC2430InterruptsC.nc"
3926          void __vector_0(void) interrupt 0
3927          //#line 142
3928          {
3929   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
3930   2      //#line 143
3931   2          {
3932   3            RFERRIF = 0;
3933   3            HplCC2430InterruptsC__InterruptRFErr__fired();
3934   3          }
3935   2      //#line 146
3936   2          __nesc_atomic_end(__nesc_atomic); }
3937   1      }
3938          
3939          void __vector_16(void) interrupt 16
3940          //#line 149
3941          {
3942   1      
3943   1      
3944   1      
3945   1      
3946   1      
3947   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
3948   2      //#line 155
3949   2          {
3950   3            uint8_t RFIF_RFIM = RFIF & RFIM;
3951   3      
3952   3      
3953   3      
3954   3      
3955   3      
3956   3      
3957   3      
3958   3      
3959   3      
3960   3      
3961   3            RFIF &= ~ (uint8_t )0x01;
3962   3            RFIF &= ~ (uint8_t )0x02;
3963   3            RFIF &= ~ (uint8_t )0x04;
3964   3            RFIF &= ~ (uint8_t )0x08;
3965   3            RFIF &= ~ (uint8_t )0x10;
3966   3            RFIF &= ~ (uint8_t )0x20;
3967   3            RFIF &= ~ (uint8_t )0x40;
3968   3            RFIF &= ~ (uint8_t )0x80;
3969   3      
3970   3            if (RFIF_RFIM & (1 << CC2430_RFIF_CCA)) {
3971   4                HplCC2430InterruptsC__InterruptCCA__fired();
3972   4              }
3973   3      
3974   3            if (RFIF_RFIM & (1 << CC2430_RFIF_FIFOP)) {
3975   4                HplCC2430InterruptsC__InterruptFIFOP__fired();
3976   4              }
3977   3      
3978   3            if (RFIF_RFIM & (1 << CC2430_RFIF_TXDONE)) {
3979   4                HplCC2430InterruptsC__InterruptTXDone__fired();
3980   4              }
3981   3      
3982   3            if (RFIF_RFIM & (1 << CC2430_RFIF_SFD)) {
3983   4                uint16_t now;
3984   4      
3985   4                (
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 66  

3986   4      //#line 190
3987   4                (uint8_t *)&now)[1] = T1CNTL;
3988   4                (
3989   4      //#line 190
3990   4                (uint8_t *)&now)[0] = T1CNTH;
3991   4                HplCC2430InterruptsC__CaptureSFD__captured(now);
3992   4              }
3993   3      
3994   3      
3995   3            S1CON &= ~0x03;
3996   3          }
3997   2      //#line 196
3998   2          __nesc_atomic_end(__nesc_atomic); }
3999   1      }
4000          
4001          //# 135 "/opt/tinyos-2.x-contrib/diku/mcs51/tos/chips/cc2430/usart/HalCC2430SimpleUartP.nc"
4002          void __vector_2(void) interrupt 2
4003          //#line 135
4004          {
4005   1        URX0IF = 0;
4006   1        HalCC2430SimpleUartP__uart0__get(U0BUF);
4007   1      }
4008          
4009          //#line 154
4010          void __vector_7(void) interrupt 7
4011          //#line 154
4012          {
4013   1        int done = 0;
4014   1      
4015   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
4016   2      //#line 157
4017   2          {
4018   3      
4019   3      
4020   3      
4021   3            if (!(U0CSR & 0x1)) {
4022   4      
4023   4                UTX0IF = 0;
4024   4                done = 1;
4025   4              }
4026   3          }
4027   2      //#line 166
4028   2          __nesc_atomic_end(__nesc_atomic); }
4029   1        if (done) {
4030   2            HalCC2430SimpleUartP__uart0__putDone();
4031   2          }
4032   1      }
4033          
*** WARNING C290 IN LINE 2528 OF APP.C: missing return value
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 67  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


HalCC2430RadioP__CC_ADDR_SHORTADDR . .  E_CONST  -----  INT      -----  2
uint16_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
HalCC2430RadioP__LEADING_ZERO_BYTES_1.  E_CONST  -----  U_CHAR   -----  1
ieee_mac_addr_t. . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
cmd_default. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  1
  command_frame_identifier . . . . . .  MEMBER   -----  U_CHAR   0000H  1
cmd_default. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  1
  command_frame_identifier . . . . . .  MEMBER   -----  U_CHAR   0000H  1
__nesc_nxbase_nx_int32_t . . . . . . .  TYPEDEF  -----  LONG     -----  4
HalCC2430RadioP__LEADING_ZERO_BYTES_2.  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_SXOSCOFF . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RXFIFO. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_FSCTRL. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TICKF_DIV_8 . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_HalCC2430RadioP__CC2420SetIEEEAddr. .  STATIC   CODE   PROC     0000H  -----
  extAddress . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
HalCC2430RadioP__LEADING_ZERO_BYTES_3.  E_CONST  -----  U_CHAR   -----  1
StdOutM__Init__init. . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
CC2420_RXCTRL0_HIGH_LNA_GAIN . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_STXCAL. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFIF_CCA. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
error_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
ESIZE. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_nxbase_nx_int16_t . . . . . . .  TYPEDEF  -----  INT      -----  2
HalCC2430RadioP__LEADING_ZERO_BYTES_4.  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_TOPTST . . . .  E_CONST  -----  U_CHAR   -----  1
SchedulerBasicP__popTask . . . . . . .  STATIC   CODE   PROC     0000H  -----
  id . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
CC2420_RXCTRL1_HIGH_HGM. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_TXFIFO. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2430_timer34_if_t. . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
HalCC2430RadioP__LEADING_ZERO_BYTES_5.  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__InterruptFIFOP__fired  STATIC   CODE   PROC     0000H  -----
IEEE154_ADDR_EXT . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IRCON2_UTX0IF . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
int_least32_t. . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
HalCC2430RadioP__LEADING_ZERO_BYTES_6.  E_CONST  -----  U_CHAR   -----  1
mac_addr_t . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CC2430_IRCON2_UTX1IF . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IEN0_ENCIE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4250 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
HalCC2430RadioP__LEADING_ZERO_BYTES_7.  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_ADDR_IEEEADDR. . .  E_CONST  -----  INT      -----  2
HalCC2430RadioP__flushBufferTask . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_IOCFG1_SFDMUX . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RXCTRL1_RXMIX_VCM . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SRXENC. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMER3_4_DIV_32 . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4260 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
__nesc_unnamed4251 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
ldiv_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  quot . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  rem. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0004H  4
__nesc_unnamed4242 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  quot . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  rem. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0004H  4
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 68  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


int_least16_t. . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
HalCC2430RadioP__rxEnabled . . . . . .  PUBLIC   XDATA  U_CHAR   0000H  1
HalCC2430RadioP__MDMCTRL0_t. . . . . .  TYPEDEF  -----  STRUCT   -----  2
  preamble_length. . . . . . . . . . .  MEMBER   -----  FIELD    0000H  4.0
  autoack. . . . . . . . . . . . . . .  MEMBER   -----  FIELD    0000H  1.4
  autocrc. . . . . . . . . . . . . . .  MEMBER   -----  FIELD    0000H  1.5
  cca_mode . . . . . . . . . . . . . .  MEMBER   -----  FIELD    0000H  2.6
  cca_hyst . . . . . . . . . . . . . .  MEMBER   -----  FIELD    0001H  3.0
  adr_decode . . . . . . . . . . . . .  MEMBER   -----  FIELD    0001H  1.3
  pan_coordinator. . . . . . . . . . .  MEMBER   -----  FIELD    0001H  1.4
  reserved_frame_mode. . . . . . . . .  MEMBER   -----  FIELD    0001H  1.5
  reserved . . . . . . . . . . . . . .  MEMBER   -----  FIELD    0001H  2.6
HalCC2430RadioP__LEADING_ZERO_BYTES_8.  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4270 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_TIMER3_4_MODE_FREE. . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4261 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
__nesc_unnamed4252 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
__nesc_unnamed4243 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  __w_termsig. . . . . . . . . . . . .  MEMBER   -----  FIELD    0000H  7.0
  __w_coredump . . . . . . . . . . . .  MEMBER   -----  FIELD    0000H  1.7
  __w_retcode. . . . . . . . . . . . .  MEMBER   -----  FIELD    0000H  8.8
  *gap*. . . . . . . . . . . . . . . .  MEMBER   -----  FIELD    0002H  16.0
int32_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
StdOutM__bufferhead. . . . . . . . . .  PUBLIC   XDATA  PTR      0001H  3
HalCC2430RadioP__LEADING_ZERO_BYTES_9.  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4271 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  phyCurrentChannel. . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  phyChannelsSupported . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  phyTransmitPower . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  phyCcaMode . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
CC2420_RXCTRL0_HIGH_LNA_CURRENT. . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMER3_4_DIV_16 . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4262 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_RFSTATUS_FIFOP. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4253 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
__nesc_unnamed4244 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  __w_stopval. . . . . . . . . . . . .  MEMBER   -----  FIELD    0000H  8.0
  __w_stopsig. . . . . . . . . . . . .  MEMBER   -----  FIELD    0000H  8.8
  *gap*. . . . . . . . . . . . . . . .  MEMBER   -----  FIELD    0002H  16.0
FCF_SRC_SHORT_ADDR . . . . . . . . . .  E_CONST  -----  INT      -----  2
__nesc_unnamed4272 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
IEEE154_TYPE_ACK . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SECCTRL1_SEC_RXL. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_TIME_ACK_TURNAROUND . . . . . .  E_CONST  -----  U_CHAR   -----  1
T32khz . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
cc2430_timerMAC_interval_t . . . . . .  * TAG *  -----  ENUM     -----  -----
__nesc_unnamed4263 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_RFIM_CCA. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4254 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
__nesc_unnamed4245 . . . . . . . . . .  * TAG *  -----  UNION    -----  3
  __uptr . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  __iptr . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
int16_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
HalCC2430RadioP__InterruptTXDone__enab  STATIC   CODE   PROC     0000H  -----
  __nesc_result. . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
__nesc_unnamed4273 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2420_MDMCTRL1_RX_MODE. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 69  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


CC2420_MDMCTRL1_DEMOD_AVG_MODE . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_STATUS_XOSC16M_STABLE . . . . .  E_CONST  -----  U_CHAR   -----  1
MAC_PACKET_SIZE. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4264 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
__nesc_unnamed4255 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
EBUSY. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4246 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  quot . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  rem. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
HalCC2430RadioP__CC_REG_AGCTST0. . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4274 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2420_SECCTRL1_SEC_TXL. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SYNCWORD_SYNCWORD . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMER3_4_DIV_64 . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4265 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
__nesc_enable_interrupt. . . . . . . .  STATIC   CODE   PROC     0000H  -----
__nesc_unnamed4256 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
__nesc_unnamed4247 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  quot . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  rem. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0004H  4
HalCC2430RadioP__CC_REG_AGCTST1. . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_MANFIDH. . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4275 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  2
  rssi . . . . . . . . . . . . . . . .  MEMBER   -----  CHAR     0000H  1
  correlation. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
FCF_DST_SHORT_ADDR . . . . . . . . . .  E_CONST  -----  INT      -----  2
CC2420_SECCTRL0_SEC_RXKEYSEL . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RXCTRL1_LOW_LOWGAIN . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MDMCTRL1_TX_MODE. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RAM_KEY0. . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CC2430_WDCTL_INT_MASK. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4266 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
__nesc_unnamed4257 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
__nesc_unnamed4248 . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  quot . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  rem. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
HalCC2430RadioP__CC_REG_AGCTST2. . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP____nesc_sillytask_tran  TYPEDEF  -----  ARRAY    -----  8
CC2420_TXCTRL_PA_CURRENT . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RAM_KEY1. . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CC2420_STATUS_RSSI_VALID . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4267 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_T1CCTLx_CAP . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4258 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
__nesc_unnamed4249 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
HalCC2430RadioP__setChannelTask. . . .  E_CONST  -----  U_CHAR   -----  1
PHYCHANNELSSUPPORTED . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PHY_TRX_OFF. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SECCTRL0_SEC_TXKEYSEL . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4268 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_TIMERMAC_MODE_IDLE. . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_unnamed4259 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
uint_fast32_t. . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
HalCC2430RadioP__receivedPacketTaskRet  PUBLIC   XDATA  U_CHAR   0004H  1
HalCC2430RadioP__CC2430RFDisable . . .  STATIC   CODE   PROC     0000H  -----
HalCC2430RadioP__CC_REG_SYNCWORD . . .  E_CONST  -----  U_CHAR   -----  1
PhyP__sendDone_task. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 70  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


__nesc_unnamed4269 . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
IEN2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009AH  1
CC2430_RFIF_TXDONE . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_MANFIDL. . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_error_codes . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
LEDS_LED0. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
IEEE154_FCF_SECURITY_ENABLED . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RXCTRL1_RXBPF_LOCUR . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MDMCTRL0_RESERVED_FRAME_MODE. .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMERWDT_MODE_TIMER . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMIF_OVFIM . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
uint_fast16_t. . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
HalCC2430RadioP__CC_REG_MANOR. . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_FSMTC. . . . .  E_CONST  -----  U_CHAR   -----  1
_HalCC2430SimpleUartP__uart0__put. . .  STATIC   CODE   PROC     0000H  -----
  _data. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
SchedulerBasicP__Scheduler__runNextTask STATIC   CODE   PROC     0000H  -----
  __nesc_temp. . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  nextTask . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
RandomMlcgC__SeedInit__parameter . . .  TYPEDEF  -----  U_INT    -----  2
FCF_INTRAPAN . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
LEDS_LED1. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cmd_association_response . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  command_frame_identifier . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  short_address1 . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  short_address2 . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  association_status . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
cmd_association_response . . . . . . .  * TAG *  -----  STRUCT   -----  4
  command_frame_identifier . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  short_address1 . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  short_address2 . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  association_status . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
CC2420_FSCTRL_FREQ . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMIF_T3OVFIF . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMERWDT_32768. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
P1_0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
RandomMlcgC__seed. . . . . . . . . . .  PUBLIC   XDATA  U_LONG   0005H  4
fsc_t. . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2
  rssi . . . . . . . . . . . . . . . .  MEMBER   -----  CHAR     0000H  1
  correlation. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
LEDS_LED2. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_IOCFG0_BCN_ACCEPT . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SECCTRL0_RXFIFO_PROTECTION. . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RAM_RXNONCE . . . . . . . . . .  E_CONST  -----  INT      -----  2
CC2430_TIMIF_T4OVFIF . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_CLKCON_CLKSPD . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RFERRIE. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
P1_1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
HalCC2430RadioP__CC_REG_RXBPFTST . . .  E_CONST  -----  U_CHAR   -----  1
FCS_CORRELATION_MASK . . . . . . . . .  E_CONST  -----  INT      -----  2
LEDS_LED3. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_nonce_enums . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_T1_OVFIF. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_MDMCTRL0H_CCA_HYST. . . . . . .  E_CONST  -----  U_CHAR   -----  1
RFERRIF. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
HalCC2430RadioP__RFIF. . . . . . . . .  SFR      DATA   U_CHAR   00E9H  1
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 71  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


HalCC2430RadioP__sendPacketDoneTask. .  E_CONST  -----  U_CHAR   -----  1
PhyP__startDone_task . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RealMainP__Scheduler__runNextTask. . .  STATIC   CODE   PROC     0000H  -----
  __nesc_result. . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
HalCC2430SimpleUartP__Init__init . . .  STATIC   CODE   PROC     0000H  -----
FCF_SRC_NO_ADDR. . . . . . . . . . . .  E_CONST  -----  INT      -----  2
LEDS_LED4. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RAM_TXNONCE . . . . . . . . . .  E_CONST  -----  INT      -----  2
CC2420_TXCTRL. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T34CTL_CLR. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__gwchar_t . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
HalCC2430RadioP__receivedPacket. . . .  PUBLIC   XDATA  ARRAY    0009H  128
HalCC2430RadioP__CC_REG_AGCCTRL. . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_SFLUSHRX . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_DEFAULT_CHANNEL . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LEDS_LED5. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_FSMTC_TC_TXEND2SWITCH . . . . .  E_CONST  -----  U_CHAR   -----  1
SchedulerBasicP__m_tail. . . . . . . .  PUBLIC   XDATA  U_CHAR   0089H  1
LEDS_LED6. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PHYCURRENTCHANNEL. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MPDUBuffer . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  126
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  frame_control1 . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  frame_control2 . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  seq_num. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  _data. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0004H  120
  retransmission . . . . . . . . . . .  MEMBER   -----  U_CHAR   007CH  1
  indirect . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   007DH  1
MPDUBuffer . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  126
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  frame_control1 . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  frame_control2 . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  seq_num. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  _data. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0004H  120
  retransmission . . . . . . . . . . .  MEMBER   -----  U_CHAR   007CH  1
  indirect . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   007DH  1
CC2430_T34CTL_DIV. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_SLEEP_XOSC_STB. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFIM_TXDONE . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_SFLUSHTX . . .  E_CONST  -----  U_CHAR   -----  1
FCF_DST_NO_ADDR. . . . . . . . . . . .  E_CONST  -----  INT      -----  2
LEDS_LED7. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PHY_BUSY . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_FSMTC_TC_PAON2TX. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RXCTRL1_LNA_CAP_ARRAY . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_config_reg_enums. . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2420_STXONCCA. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
nxle_uint32_t. . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  8
nx_uint8_t . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  1
  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1
HalCC2430RadioP__InterruptRFErr__enabl  STATIC   CODE   PROC     0000H  -----
  __nesc_result. . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
cc2420_sfdmux_enums. . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2420_TXCTRL_TXMIX_CURRENT. . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFIF_SFD. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
int_fast32_t . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 72  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_HplCC2430InterruptsC__CaptureSFD__cap  STATIC   CODE   PROC     0000H  -----
  time . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
HalCC2430RadioP____nesc_sillytask_flus  TYPEDEF  -----  ARRAY    -----  14
CC2420_TXCTRL_TX_TURNAROUND. . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T1CCTLx_CMP . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T1CTL_IF_MASK . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
div_t. . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  quot . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  rem. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0002H  2
nxle_uint16_t. . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2
  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
HalCC2430SimpleUartP__uart0__putDone .  STATIC   CODE   PROC     0000H  -----
CC2420_TIME_SYMBOL . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
int_fast16_t . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
HplCC2430InterruptsC__InterruptTXDone_  STATIC   CODE   PROC     0000H  -----
PhyP__sendErr. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   008AH  1
IEEE154_FCF_FRAME_PENDING. . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_rsctrl_enums. . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
__nesc_nxbase_nxle_uint8_t . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_ADDR_CBCSTATE. . .  E_CONST  -----  INT      -----  2
SchedulerBasicP__McuSleep__sleep . . .  STATIC   CODE   PROC     0000H  -----
cc2420_enums . . . . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
SUCCESS. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
nxle_uint64_t. . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  8
StdOutM__isOutputting. . . . . . . . .  PUBLIC   XDATA  INT      008BH  2
_HalCC2430RadioP__CC2430SetShortaddr .  STATIC   CODE   PROC     0000H  -----
  shortAddr. . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
cc2420_fsmtc_enums . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_TIMER3_4_MODE_DOWN. . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2430_tick_spd_t. . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_RFPWR_RREG_RADIO_PD . . . . . .  E_CONST  -----  U_CHAR   -----  1
FAIL . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__vector_16. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  now. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0002H  2
  RFIF_RFIM. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
CC2430_TIMERWDT_512. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__receivedPacketTaskPos  PUBLIC   XDATA  U_CHAR   008DH  1
TestStdControlP__Boot__booted. . . . .  STATIC   CODE   PROC     0000H  -----
FCS_CRC_OK_MASK. . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CC2420_SXOSCOFF. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_MDMCTRL0H_FRAME_FILT. . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFIM_SFD. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IRCON_P0IF. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
StdOutM__buffertail. . . . . . . . . .  PUBLIC   XDATA  PTR      008EH  3
HalCC2430RadioP__CC_ADDR_RXFIFO. . . .  E_CONST  -----  INT      -----  2
CC2430_TIMER1_MODE_MODULO. . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IEN2_WDTIE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
StdOutM__count . . . . . . . . . . . .  PUBLIC   XDATA  INT      0091H  2
HalCC2430RadioP__CC2430RFEnable. . . .  STATIC   CODE   PROC     0000H  -----
HalCC2430RadioP____nesc_sillytask_setC  TYPEDEF  -----  ARRAY    -----  10
CC2420_TOPTST. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MAC_FOOTER_SIZE. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_atomic_t. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
EOFF . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
nxle_int32_t . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 73  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  8
nx_int8_t. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  1
  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1
HalCC2430RadioP__CC2430TxWait. . . . .  STATIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0002H  1
HalCC2430RadioP__CC_ADDR_TXFIFO. . . .  E_CONST  -----  INT      -----  2
PhyP____nesc_sillytask_sendDone_task .  TYPEDEF  -----  ARRAY    -----  4
HplCC2430InterruptsC__InterruptFIFOP__  STATIC   CODE   PROC     0000H  -----
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
PHY_BUSY_RX. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_secctrl0_enums. . . . . . . . .  * TAG *  -----  ENUM     -----  -----
cc2420_txctrl_enums. . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2420_STATUS_LOCK . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T1CTL_MODE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_HalCC2430RadioP__wait . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  u. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  j. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
cc2420_secctrl1_enums. . . . . . . . .  * TAG *  -----  ENUM     -----  -----
U0BAUD . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C2H  1
nxle_int16_t . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2
  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
HalCC2430RadioP__CC_REG_RXCTRL0. . . .  E_CONST  -----  U_CHAR   -----  1
FCF_SRC_ADDR_MASK. . . . . . . . . . .  E_CONST  -----  INT      -----  2
PHY_BUSY_TX. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
IEEE154_ADDR_SHORT . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_main_enums. . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_T34CTL_DIV_MASK . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2430_timer1_mode_t . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_IRCON_T1IF. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_RXCTRL1. . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__flushBufferTask__post  STATIC   CODE   PROC     0000H  -----
  __nesc_result. . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
cc2420_mdmctrl0_enums. . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2420_MAIN_FS_RESETn. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_status_enums. . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_WDCTL_EN. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IRCON_T2IF. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IEN0_EA . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_nxbase_nxle_int8_t. . . . . . .  TYPEDEF  -----  CHAR     -----  1
FCF_FRAMEPENDING . . . . . . . . . . .  E_CONST  -----  INT      -----  2
IEEE154_FCF_INTRAPAN . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_mdmctrl1_enums. . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_TIMER1_DIV_128. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IRCON_T3IF. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
nxle_int64_t . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  8
HalCC2430RadioP____nesc_sillytask_send  TYPEDEF  -----  ARRAY    -----  16
PhyP____nesc_sillytask_startDone_task.  TYPEDEF  -----  ARRAY    -----  -----
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
HplCC2430InterruptsC__InterruptFIFOP__  STATIC   CODE   PROC     0000H  -----
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
HalCC2430RadioP__transmitTask__runTask  STATIC   CODE   PROC     0000H  -----
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  oldRxEnabled . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 74  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  status . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  counter. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
McuSleepC__McuSleep__sleep . . . . . .  STATIC   CODE   PROC     0000H  -----
FCF_DST_ADDR_MASK. . . . . . . . . . .  E_CONST  -----  INT      -----  2
CC2430_IRCON_T4IF. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LedsP__Init__init. . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
CC2420_DEFAULT_POWER . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FCF_SRC_LONG_ADDR. . . . . . . . . . .  E_CONST  -----  INT      -----  2
source_long. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  10
  source_PAN_identifier. . . . . . . .  MEMBER   -----  U_INT    0000H  2
  source_address0. . . . . . . . . . .  MEMBER   -----  U_LONG   0002H  4
  source_address1. . . . . . . . . . .  MEMBER   -----  U_LONG   0006H  4
source_long. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  10
  source_PAN_identifier. . . . . . . .  MEMBER   -----  U_INT    0000H  2
  source_address0. . . . . . . . . . .  MEMBER   -----  U_LONG   0002H  4
  source_address1. . . . . . . . . . .  MEMBER   -----  U_LONG   0006H  4
CC2420_TXCTRL_TXMIX_CAP_ARRAY. . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFPWR_RREG_DELAY. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RFIF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E9H  1
HplCC2430InterruptsC__InterruptRFErr__  STATIC   CODE   PROC     0000H  -----
_HalCC2430RadioP__CC2430ChannelSet . .  STATIC   CODE   PROC     0000H  -----
  channel. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  freq . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
SchedulerBasicP____nesc_unnamed4276. .  * TAG *  -----  ENUM     -----  -----
source_short . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  source_PAN_identifier. . . . . . . .  MEMBER   -----  U_INT    0000H  2
  source_address . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
source_short . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  source_PAN_identifier. . . . . . . .  MEMBER   -----  U_INT    0000H  2
  source_address . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
CC2420_IOCFG1_HSSD_SRC . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_IOCFG0_FIFO_POLARITY. . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_AGCTST0 . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TMAC_CMPIF. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMER1_MODE_OFF . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC2430ExternalOscilla  STATIC   CODE   PROC     0000H  -----
HalCC2430RadioP__CC_REG_BATTMON. . . .  E_CONST  -----  U_CHAR   -----  1
cmd_association_request. . . . . . . .  TYPEDEF  -----  STRUCT   -----  2
  command_frame_identifier . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  capability_information . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
cmd_association_request. . . . . . . .  * TAG *  -----  STRUCT   -----  2
  command_frame_identifier . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  capability_information . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
CC2420_AGCTST1 . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MANFIDH . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RREG_DELAY_500. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__receivedPacketTask. .  E_CONST  -----  U_CHAR   -----  1
PhyP__stopDone_task. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SchedulerBasicP__m_next. . . . . . . .  PUBLIC   XDATA  ARRAY    0093H  9
PhyP__SplitControl__start. . . . . . .  STATIC   CODE   PROC     0000H  -----
FCF_DST_LONG_ADDR. . . . . . . . . . .  E_CONST  -----  INT      -----  2
CC2420_MAIN_RESETn . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_AGCTST2 . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_MDMCTRL0H_PAN_COORDINATOR . . .  E_CONST  -----  U_CHAR   -----  1
StdOutM__bufferend . . . . . . . . . .  PUBLIC   XDATA  PTR      009CH  3
HalCC2430RadioP__CC_REG_IOCFG0 . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RREG_DELAY_250. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 75  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


HplCC2430InterruptsC__InterruptCCA__fi  STATIC   CODE   PROC     0000H  -----
HalCC2430RadioP__CC_REG_IOCFG1 . . . .  E_CONST  -----  U_CHAR   -----  1
NoPinC__0__GeneralIO__makeOutput . . .  STATIC   CODE   PROC     0000H  -----
CC2420_SYNCWORD. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMER1_MODE_UPDOWN. . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RREG_DELAY_125. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFIF_CSP_WT . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_SRXON. . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_FSMTC_TC_TXEND2PAOFF. . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MANFIDL . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TICKF_DIV_32. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
bool . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
TestStdControlP__SplitControl__start .  STATIC   CODE   PROC     0000H  -----
  __nesc_result. . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
phyPIB . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  phyCurrentChannel. . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  phyChannelsSupported . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  phyTransmitPower . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  phyCcaMode . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
cmd_coord_realignment. . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  command_frame_identifier . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  PAN_identifier0. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  PAN_identifier1. . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  coordinator_short_address0 . . . . .  MEMBER   -----  U_CHAR   0003H  1
  coordinator_short_address1 . . . . .  MEMBER   -----  U_CHAR   0004H  1
  logical_channel. . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  short_address. . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
cmd_coord_realignment. . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  command_frame_identifier . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  PAN_identifier0. . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  PAN_identifier1. . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  coordinator_short_address0 . . . . .  MEMBER   -----  U_CHAR   0003H  1
  coordinator_short_address1 . . . . .  MEMBER   -----  U_CHAR   0004H  1
  logical_channel. . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  short_address. . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
CC2420_MANOR . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_FSMTC . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T2CNF_SYNC. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RFIM . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
HalCC2430RadioP__LEADING_ZERO_BYTES_10  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_STXON. . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TMAC_PERIF. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T1CTL_MODE_MASK . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TICKF_DIV_16. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_MDMCTRL0L_AUTOACK . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFIF_FIFOP. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__LEADING_ZERO_BYTES_11  E_CONST  -----  U_CHAR   -----  1
CC2420_FSCTRL_LOCK_LENGTH. . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RXBPFTST. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T1CCTLx_CPSEL . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IEN2_P1IE . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IEN0_RFERRIE. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__currentChannel. . . .  PUBLIC   XDATA  U_CHAR   009FH  1
HalCC2430RadioP__LEADING_ZERO_BYTES_12  E_CONST  -----  U_CHAR   -----  1
IEEE154_FCF_SRC_ADDR_MODE. . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_header_t. . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  11
  length . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  1
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 76  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  fcf. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0001H  2
  dsn. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0003H  1
  destpan. . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0004H  2
  dest . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0006H  2
  src. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0008H  2
  type . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   000AH  1
cc2420_header_t. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  length . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  1
  fcf. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0001H  2
  dsn. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0003H  1
  destpan. . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0004H  2
  dest . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0006H  2
  src. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0008H  2
  type . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   000AH  1
CC2430_T34CTL_WDTIF. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IEN2_P2IE . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__LEADING_ZERO_BYTES_13  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__sendPacketDoneTask__p  STATIC   CODE   PROC     0000H  -----
  __nesc_result. . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
HalCC2430RadioP__flushBufferTask__runT  STATIC   CODE   PROC     0000H  -----
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
CC2420_AGCCTRL . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SFLUSHRX. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TICKF_DIV_64. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_SLEEP_MODE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ENOACK . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__LEADING_ZERO_BYTES_14  E_CONST  -----  U_CHAR   -----  1
_PhyP__SplitControl__startDone . . . .  STATIC   CODE   PROC     0000H  -----
  error. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_StdOutM__UART__get. . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  _data. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CC2420_MANFIDH_VERSION . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_CLKCON_OSC. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
T1CNTH . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E3H  1
CC2430_RFIM_CSP_WT . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__LEADING_ZERO_BYTES_15  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_SACK . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MANFIDH_PARTNUM . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_BATTMON_BATTMON_EN. . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SFLUSHTX. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T34CTL_OVFIM. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__LEADING_ZERO_BYTES_16  E_CONST  -----  U_CHAR   -----  1
_SchedulerBasicP__TaskBasic__postTask.  STATIC   CODE   PROC     0000H  -----
  id . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  __nesc_temp. . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
CC2420_MDMCTRL0_ADR_DECODE . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMER3_4_MODE_MODULO. . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFPWR_RREG_DELAY_MASK . . . . .  E_CONST  -----  U_CHAR   -----  1
MPDU . . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  124
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  frame_control1 . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  frame_control2 . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  seq_num. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  _data. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0004H  120
MPDU . . . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  124
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 77  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  frame_control1 . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  frame_control2 . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  seq_num. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  _data. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0004H  120
CC2420_BATTMON_BATTMON_VOLTAGE . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SECCTRL0_SEC_MODE . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_FSCTRL_CAL_RUNNING. . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RXCTRL0_MED_LNA_GAIN. . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_SLEEP_OSC32K_CALDIS . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFSTATUS_FIFO . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFIM_FIFOP. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
wait . . . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  4
  w_status . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  __wait_terminated. . . . . . . . . .  MEMBER   -----  STRUCT   0000H  4
  __wait_stopped . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  4
HalCC2430RadioP__CC_REG_MAIN . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__initTask. . . . . . .  E_CONST  -----  U_CHAR   -----  1
SchedulerBasicP__Scheduler__init . . .  STATIC   CODE   PROC     0000H  -----
_TestStdControlP__SplitControl__startD  STATIC   CODE   PROC     0000H  -----
  error. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
cc2420_iocfg0_enums. . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2420_RXCTRL1_MED_HGM . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_WDCTL_MODE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
T1CNTL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E2H  1
CC2420_MANFIDL_PARTNUM . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_iocfg1_enums. . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_MDMCTRL0L_AUTOCRC . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PERCFG . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F1H  1
HplMcs51GeneralIOC__P10__makeOutput. .  STATIC   CODE   PROC     0000H  -----
CC2420_FSCTRL_CAL_DONE . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2430_timer3_4_mode_t . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_RFPWR_ADI_RADIO_PD. . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__cca_hyst_db_t . . . .  TYPEDEF  -----  U_CHAR   -----  1
RealMainP__Scheduler__init . . . . . .  STATIC   CODE   PROC     0000H  -----
HplMcs51GeneralIOC__P11__makeOutput. .  STATIC   CODE   PROC     0000H  -----
HalCC2430RadioP__setChannelTask__runTaskSTATIC   CODE   PROC     0000H  -----
CC2420_TXCTRL_TXMIXBUF_CUR . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMER1_DIV_1. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PhyP__sendDone_task__runTask . . . . .  STATIC   CODE   PROC     0000H  -----
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  packetErr. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
_PhyP__HALCC2420__sendPacketDone . . .  STATIC   CODE   PROC     0000H  -----
  packet . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  result . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
fcf_stuff. . . . . . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2420_FSMTC_TC_SWITCH2TX. . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_ram_addr_enums. . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_TIMER3_4_DIV_128. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CLKCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C6H  1
HalCC2430RadioP__CC_ADDR_PANID . . . .  E_CONST  -----  INT      -----  2
CC2420_RXCTRL0_MED_LNA_CURRENT . . . .  E_CONST  -----  U_CHAR   -----  1
__WAIT_STATUS. . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  3
  __uptr . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  __iptr . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
HalCC2430RadioP____nesc_sillytask_rece  TYPEDEF  -----  ARRAY    -----  12
PhyP____nesc_sillytask_stopDone_task .  TYPEDEF  -----  ARRAY    -----  2
CC2420_NONCE_KEY_SEQ_COUNTER . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 78  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


CC2420_RAM_CBCSTATE. . . . . . . . . .  E_CONST  -----  INT      -----  2
HalCC2430RadioP__CC_REG_SAES . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_STATUS_TX_UNDERFLOW . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TMAC_OFCMPIF. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
URX0IE . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
IEEE154_TYPE_MAC_CMD . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MANFIDL_MANFID. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_rssi_enums. . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
RFST . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E1H  1
URX0IF . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
HalCC2430RadioP__CC2430RxDisable . . .  STATIC   CODE   PROC     0000H  -----
HalCC2430RadioP__sendPacketDoneTask__r  STATIC   CODE   PROC     0000H  -----
PhyP__startDone_task__runTask. . . . .  STATIC   CODE   PROC     0000H  -----
cc2420_packet_t. . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  53
  packet . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  11
  _data. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    000BH  42
cc2420_packet_t. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  53
  packet . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  11
  _data. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    000BH  42
CC2430_T2PEROF2_CMPIM. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_SLEEP_MODE_MASK . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
P1_DIR . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FEH  1
CC2430_IRCON2_WDTIF. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EINVAL . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TRUE . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_ADDR_SABUF . . . .  E_CONST  -----  INT      -----  2
HalCC2430RadioP__CC_REG_SXOSCON. . . .  E_CONST  -----  U_CHAR   -----  1
PhyP__HALCC2420Control__start. . . . .  STATIC   CODE   PROC     0000H  -----
  __nesc_result. . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CC2420_RAM_RXFIFO. . . . . . . . . . .  E_CONST  -----  INT      -----  2
CC2420_RXCTRL0 . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T34CTL_START. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMER1_DIV_8. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
P0_ALT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F3H  1
UTX0IF . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E9H  1
HalCC2430RadioP__CC2430Reset . . . . .  STATIC   CODE   PROC     0000H  -----
HalCC2430RadioP__CC_REG_MANAND . . . .  E_CONST  -----  U_CHAR   -----  1
_HalCC2430RadioP__StdOut__print. . . .  STATIC   CODE   PROC     0000H  -----
  str. . . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
  __nesc_result. . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
_HplCC2430InterruptsC__CaptureSFD__def  STATIC   CODE   PROC     0000H  -----
  time . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
HalCC2430RadioP__InterruptTXDone__fired STATIC   CODE   PROC     0000H  -----
IEEE154_ADDR_NONE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_NONCE_SOURCE_ADDRESS. . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RXCTRL1 . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_STATUS_TX_ACTIVE. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMER3_4_MODE_UPDOWN. . . . . .  E_CONST  -----  U_CHAR   -----  1
ENOMEM . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SchedulerBasicP__TaskBasic__runTask .  STATIC   CODE   PROC     0000H  -----
  arg_0x2ab5a42bc3c8 . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
NoPinC__0__GeneralIO__set. . . . . . .  STATIC   CODE   PROC     0000H  -----
CC2420_RAM_TXFIFO. . . . . . . . . . .  E_CONST  -----  INT      -----  2
cc2430_timer1_prescaler_t. . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_MDMCTRL0H_ADDR_DECODE . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RREG_DELAY_0. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
nx_uint32_t. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 79  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  8
dest_long. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  10
  destination_PAN_identifier . . . . .  MEMBER   -----  U_INT    0000H  2
  destination_address0 . . . . . . . .  MEMBER   -----  U_LONG   0002H  4
  destination_address1 . . . . . . . .  MEMBER   -----  U_LONG   0006H  4
dest_long. . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  10
  destination_PAN_identifier . . . . .  MEMBER   -----  U_INT    0000H  2
  destination_address0 . . . . . . . .  MEMBER   -----  U_LONG   0002H  4
  destination_address1 . . . . . . . .  MEMBER   -----  U_LONG   0006H  4
CC2420_RXCTRL1_RXMIX_CURRENT . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_BACKOFF_PERIOD. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2430_timerMAC_mode_t . . . . . . . .  * TAG *  -----  ENUM     -----  -----
FCF_FT_DATA. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
dest_short . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  destination_PAN_identifier . . . . .  MEMBER   -----  U_INT    0000H  2
  destination_address. . . . . . . . .  MEMBER   -----  U_INT    0002H  2
dest_short . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  destination_PAN_identifier . . . . .  MEMBER   -----  U_INT    0000H  2
  destination_address. . . . . . . . .  MEMBER   -----  U_INT    0002H  2
CC2430_IRCON_STIF. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
nx_uint16_t. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2
  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
CC2420_FMSTATE . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T1CTL_CH0IF . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_ecombine. . . . . . . . . . . . . . .  STATIC   CODE   PROC     0007H  -----
  r1 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  r2 . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
CC2420_SFDMUX_SFD. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MDMCTRL0_PREAMBLE_LENGTH. . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_BATTMON . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T2PEROF2_PERIM. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T1CTL_CH1IF . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IEN2_RFIE . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_nxbase_nxle_uint32_t. . . . . .  TYPEDEF  -----  U_LONG   -----  4
__nesc_nxbase_nx_uint8_t . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
ptrdiff_t. . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
CC2420_ERROR_TX. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MDMCTRL0_CCA_HYST . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T1CTL_CH2IF . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFIF_CSP_STOP . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
nx_uint64_t. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  8
HalCC2430RadioP__InterruptFIFOP__enabl  STATIC   CODE   PROC     0000H  -----
  __nesc_result. . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
HalCC2430RadioP__receivedPacketTask__p  STATIC   CODE   PROC     0000H  -----
  __nesc_result. . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CC2420_ERROR_RADIO_OFF . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RXCTRL1_RXMIX_TAIL. . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_IOCFG0. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EALREADY . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_nxbase_nxle_uint16_t. . . . . .  TYPEDEF  -----  U_INT    -----  2
HalCC2430RadioP____nesc_sillytask_init  TYPEDEF  -----  ARRAY    -----  6
_PhyP__SplitControl__stopDone. . . . .  STATIC   CODE   PROC     0000H  -----
  error. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
intra_pan_source_long. . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  source_address0. . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  source_address1. . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 80  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


intra_pan_source_long. . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  source_address0. . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  source_address1. . . . . . . . . . .  MEMBER   -----  U_LONG   0004H  4
CC2420_IOCFG0_CCA_POLARITY . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_IOCFG1. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
imaxdiv_t. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  quot . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  rem. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0004H  4
_StdOutM__StdOut__print. . . . . . . .  STATIC   CODE   PROC     0000H  -----
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  return_flag. . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  countret . . . . . . . . . . . . . .  AUTO     XDATA  INT      0005H  2
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  na_countret. . . . . . . . . . . . .  * REG *  DATA   INT      0004H  2
intra_pan_source_short . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2
  source_address . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
intra_pan_source_short . . . . . . . .  * TAG *  -----  STRUCT   -----  2
  source_address . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
CC2420_SRXON . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2430_timer1_if_t . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
uint_least8_t. . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_StdOutM__UART__put. . . . . . . . . .  STATIC   CODE   PROC     000FH  -----
  _data. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  __nesc_result. . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
HalCC2430RadioP__receivedPacketPtr . .  PUBLIC   XDATA  PTR      00A0H  3
CC2420_SECCTRL0_SEC_CBC_HEAD . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__cc2420_addr_t . . . .  TYPEDEF  -----  INT      -----  2
SchedulerBasicP__NO_TASK . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_defaults. . . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2420_STXON . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TMilli . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
CC2430_T1CCTLx_IM. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
nx_int32_t . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  8
HalCC2430RadioP__InterruptFIFOP__disableSTATIC   CODE   PROC     0000H  -----
  __nesc_result. . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_TestStdControlP__SplitControl__stopDoneSTATIC   CODE   PROC     0000H  -----
  error. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
ACK. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  frame_control1 . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  frame_control2 . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  seq_num. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
ACK. . . . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  frame_control1 . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  frame_control2 . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  seq_num. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
CC2420_RXCTRL1_RXBPF_MIDCUR. . . . . .  E_CONST  -----  U_CHAR   -----  1
__compar_fn_t. . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
uint8_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
PhyP__Init__init . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
packet_t . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  128
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  fcf. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  _data_seq_no . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  dest . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 81  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  src. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  _data. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0008H  118
  fcs. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   007EH  2
CC2420_BATTMON_BATT_OK . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_rxctrl0_enums . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_RFIM_CSP_STOP . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
nx_int16_t . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2
  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
HalCC2430RadioP__ieeeAddress . . . . .  PUBLIC   XDATA  ARRAY    00A3H  8
HalCC2430RadioP__CC2430ControlSet. . .  STATIC   CODE   PROC     0000H  -----
PhyP____nesc_unnamed4277 . . . . . . .  * TAG *  -----  ENUM     -----  -----
_SchedulerBasicP__isWaiting. . . . . .  STATIC   CODE   PROC     0000H  -----
  id . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
HplMcs51GeneralIOC__P10__set . . . . .  STATIC   CODE   PROC     0000H  -----
HalCC2430RadioP__InterruptRFErr__fired  STATIC   CODE   PROC     0000H  -----
cc2420_rxctrl1_enums . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
TMicro . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
CC2430_TIMER3_4_DIV_1. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PhyP____nesc_unnamed4278 . . . . . . .  * TAG *  -----  ENUM     -----  -----
HplMcs51GeneralIOC__P11__set . . . . .  STATIC   CODE   PROC     0000H  -----
ieee154_fcf_enums. . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_TIMER3_4_DIV_2. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IRCON2_P1IF . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_nxbase_nxle_int32_t . . . . . .  TYPEDEF  -----  LONG     -----  4
__nesc_nxbase_nx_int8_t. . . . . . . .  TYPEDEF  -----  CHAR     -----  1
HalCC2430RadioP__CC2430RxEnable. . . .  STATIC   CODE   PROC     0000H  -----
HalCC2430RadioP__CC_REG_SNOP . . . . .  E_CONST  -----  U_CHAR   -----  1
PhyP____nesc_unnamed4279 . . . . . . .  * TAG *  -----  ENUM     -----  -----
_PhyP__HALCC2420__receivedPacket . . .  STATIC   CODE   PROC     0000H  -----
  packet . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
CC2420_FSCTRL_LOCK_STATUS. . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RXCTRL0_LOW_LNA_GAIN. . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SACK. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_SLEEP_POWERMODE_0 . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IRCON2_P2IF . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
nx_int64_t . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  8
HalCC2430RadioP__CC_REG_RSSI . . . . .  E_CONST  -----  U_CHAR   -----  1
_HalCC2430RadioP__StdOut__get. . . . .  STATIC   CODE   PROC     0000H  -----
  _data. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
SchedulerBasicP__Scheduler__taskLoop .  STATIC   CODE   PROC     0000H  -----
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  nextTask . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
cmd_gts_request. . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  source_PAN_identifier. . . . . . . .  MEMBER   -----  U_INT    0000H  2
  source_address . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  command_frame_identifier . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  gts_characteristics. . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
cmd_gts_request. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  source_PAN_identifier. . . . . . . .  MEMBER   -----  U_INT    0000H  2
  source_address . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  command_frame_identifier . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  gts_characteristics. . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
IEEE154_TYPE_DATA. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMER3_4_DIV_4. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_SLEEP_POWERMODE_1 . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_nxbase_nxle_int16_t . . . . . .  TYPEDEF  -----  INT      -----  2
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 82  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


HalCC2430RadioP__CC_REG_SECCTRL0 . . .  E_CONST  -----  U_CHAR   -----  1
FCF_FT_BEACON. . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
cc2430_timerMAC_T2PEROF2_t . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_SLEEP_POWERMODE_2 . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IEN0_STIE . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
drand48__data. . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  19
  __x. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  6
  __old_x. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0006H  6
  __c. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  __init . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
  __a. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0010H  3
HalCC2430RadioP__CC_REG_SECCTRL1 . . .  E_CONST  -----  U_CHAR   -----  1
StdOutM__UART__putDone . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
IEEE154_FCF_FRAME_TYPE . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MAIN. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_SLEEP_POWERMODE_3 . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RREG_DELAY_1000 . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
int_least8_t . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
HalCC2430RadioP__CC_REG_DACTST . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_ADCTST . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__initTask__postTask. .  STATIC   CODE   PROC     0000H  -----
  __nesc_result. . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
RealMainP__Scheduler__taskLoop . . . .  STATIC   CODE   PROC     0000H  -----
HplCC2430InterruptsC__InterruptCCA__de  STATIC   CODE   PROC     0000H  -----
CC2430_T2PEROF2_OFCMPIM. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RREG_DELAY_2000 . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LedsP__Led0__makeOutput. . . . . . . .  STATIC   CODE   PROC     0000H  -----
HalCC2430RadioP__CC_REG_FSTST0 . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_MDMCTRL0 . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__receivedPacketTask__r  STATIC   CODE   PROC     0000H  -----
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  correlation. . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
PhyP__stopDone_task__runTask . . . . .  STATIC   CODE   PROC     0000H  -----
FCF_FT_MASK. . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
cc2420_manfidh_enums . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2420_TXCTRL_RESERVED . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_footer_t. . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  1
  i. . . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  1
cc2420_footer_t. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  1
  i. . . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  1
CC2430_TIMER3_4_DIV_8. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T34CTL_MODE . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
LedsP__Led1__makeOutput. . . . . . . .  STATIC   CODE   PROC     0000H  -----
HalCC2430RadioP__CC_REG_FSTST1 . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_MDMCTRL1 . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RXCTRL0_LOW_LNA_CURRENT . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFSTATUS_CCA. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_MDMCTRL0H_RESERVED_FRAME_MODE .  E_CONST  -----  U_CHAR   -----  1
int8_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
LedsP__Led2__makeOutput. . . . . . . .  STATIC   CODE   PROC     0000H  -----
_HalCC2430RadioP__CC2430SetPanid . . .  STATIC   CODE   PROC     0000H  -----
  id . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 83  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


HalCC2430RadioP__CC_REG_FSTST2 . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_SRFOFF . . . .  E_CONST  -----  U_CHAR   -----  1
PHY_UNSUPPORTED_ATTRIBUTE. . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RSSI_RSSI_VAL . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2430_timer3_4_prescaler_t. . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_TIMERWDT_8192 . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HplCC2430InterruptsC__InterruptFIFOP__  STATIC   CODE   PROC     0000H  -----
HalCC2430RadioP__CC_REG_FSTST3 . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_FSCTRL_LOCK_THR . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_manfidl_enums . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2420_RAM_SHORTADR. . . . . . . . . .  E_CONST  -----  INT      -----  2
RFD. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D9H  1
_StdOutM__StdOut__get. . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  _data. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
HalCC2430RadioP__CC_REG_SRXDEC . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SECCTRL0_SEC_M. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SAES. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFSTATUS_TX_ACTIVE. . . . . . .  E_CONST  -----  U_CHAR   -----  1
ERETRY . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_SACKPEND . . .  E_CONST  -----  U_CHAR   -----  1
IEEE154_FCF_ACK_REQ. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T1CCTLx_MODE. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_atomic_start. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  tmp. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CC2430_IEN0_URX0IE . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
FCF_FT_MAC_COMMAND . . . . . . . . . .  E_CONST  -----  INT      -----  2
PHY_FORCE_TRX_OFF. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MDMCTRL1_CORR_THR . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RAM_PANID . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CC2430_T1CTL_DIV . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IEN0_URX1IE . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
uintmax_t. . . . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
HalCC2430RadioP__frameLength . . . . .  PUBLIC   XDATA  U_CHAR   00ABH  1
CC2420_TXCTRL_PA_LEVEL . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MDMCTRL1_MODULATION_MODE. . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MDMCTRL0_CCA_MOD. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MAIN_XOSC16M_BYPASS . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SXOSCON . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMIF_T3CH0IF . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
uint_fast8_t . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
HplCC2430InterruptsC__InterruptTXDone_  STATIC   CODE   PROC     0000H  -----
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
PHYCCAMODE . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_IOCFG0_SFD_POLARITY . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MDMCTRL0_PAN_COORDINATOR. . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MANAND. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMIF_T3CH1IF . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMIF_T4CH0IF . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T2CNF_CMPIF . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
random__data . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  18
  fptr . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  rptr . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
  state. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0006H  3
  rand_type. . . . . . . . . . . . . .  MEMBER   -----  INT      0009H  2
  rand_deg . . . . . . . . . . . . . .  MEMBER   -----  INT      000BH  2
  rand_sep . . . . . . . . . . . . . .  MEMBER   -----  INT      000DH  2
  end_ptr. . . . . . . . . . . . . . .  MEMBER   -----  PTR      000FH  3
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 84  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


HalCC2430RadioP__CC_REG_RXFIFO . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_FSCTRL . . . .  E_CONST  -----  U_CHAR   -----  1
PHY_INVALID_PARAMETER. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MDMCTRL0_AUTOACK. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MAIN_ENC_RESETn . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMIF_T4CH1IF . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T1_CH0IF. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
U0GCR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C5H  1
CC2430_IEN2_UTX0IE . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_STXCAL . . . .  E_CONST  -----  U_CHAR   -----  1
FCF_SECENC . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
IEEE154_TYPE_BEACON. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RAM_IEEEADR . . . . . . . . . .  E_CONST  -----  INT      -----  2
cc2430_timerWDT_mode_t . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_T1_CH1IF. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_CLKCON_TICKSPD. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
U0BUF. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C1H  1
CC2430_IEN2_UTX1IE . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_TXFIFO . . . .  E_CONST  -----  U_CHAR   -----  1
_HalCC2430RadioP__HALCC2420__sendPacke  STATIC   CODE   PROC     0000H  -----
  packet . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
  result . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
CC2420_ERROR_CCA . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RAM_SABUF . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CC2430_TIMERMAC_MODE_RUN . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T1_CH2IF. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TICKF_DIV_128 . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ERESERVE . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__initTask__runTask . .  STATIC   CODE   PROC     0000H  -----
CC2430_CLKCON_OSC32K . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
___nesc_atomic_end . . . . . . . . . .  PUBLIC   CODE   PROC     000DH  -----
  oldSreg. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
S1CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009BH  1
__vector_0 . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
CC2430_T34CTL_MODE_MASK. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T2CNF_RUN . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T2CNF_CMSEL . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RXCTRL0_RXMIXBUF_CUR. . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_SLEEP_OSC_PD. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFIM_RREG_PD. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__vector_2 . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
PlatformP__Init__init. . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  new_clkcon . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CC2420_ACK_WAIT_DELAY. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T2CNF_PERIF . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_ADDR_KEY0. . . . .  E_CONST  -----  INT      -----  2
HalCC2430RadioP__CC_REG_STXENC . . . .  E_CONST  -----  U_CHAR   -----  1
FCF_ACKREQ . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
CC2430_RFIF_RREG_ON. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
nxle_uint8_t . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  1
  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1
intmax_t . . . . . . . . . . . . . . .  TYPEDEF  -----  PTR      -----  3
HalCC2430RadioP__shortAddress. . . . .  PUBLIC   XDATA  U_INT    00ACH  2
HalCC2430RadioP__CC_ADDR_KEY1. . . . .  E_CONST  -----  INT      -----  2
HalCC2430RadioP__HALCC2420Control__startSTATIC   CODE   PROC     0000H  -----
CC2420_RSSI_CCA_THR. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 85  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


int_fast8_t. . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
CC2420_MDMCTRL0_AUTOCRC. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2420_meta_data_t . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  7
  tx_power . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  1
  rssi . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0001H  1
  lqi. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0002H  1
  crc. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0003H  1
  ack. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0004H  1
  time . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0005H  2
cc2420_meta_data_t . . . . . . . . . .  * TAG *  -----  STRUCT   -----  7
  tx_power . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  1
  rssi . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0001H  1
  lqi. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0002H  1
  crc. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0003H  1
  ack. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0004H  1
  time . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0005H  2
CC2420_MAIN_MOD_RESETn . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TOS_NODE_ID. . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    00AEH  2
FALSE. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
wchar_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
__vector_7 . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  done . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0004H  2
cc2420_status_t. . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
cc2430_timerMAC_if_t . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_T1CTL_DIV_MASK. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFIF_CSP_INT. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ECANCEL. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_SchedulerBasicP__TaskBasic__default__  STATIC   CODE   PROC     0000H  -----
  id . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
PHY_SUCCESS. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cmd_disassociation_notification. . . .  TYPEDEF  -----  STRUCT   -----  22
  destination_PAN_identifier . . . . .  MEMBER   -----  U_INT    0000H  2
  destination_address0 . . . . . . . .  MEMBER   -----  U_LONG   0002H  4
  destination_address1 . . . . . . . .  MEMBER   -----  U_LONG   0006H  4
  source_PAN_identifier. . . . . . . .  MEMBER   -----  U_INT    000AH  2
  source_address0. . . . . . . . . . .  MEMBER   -----  U_LONG   000CH  4
  source_address1. . . . . . . . . . .  MEMBER   -----  U_LONG   0010H  4
  command_frame_identifier . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  disassociation_reason. . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
cmd_disassociation_notification. . . .  * TAG *  -----  STRUCT   -----  22
  destination_PAN_identifier . . . . .  MEMBER   -----  U_INT    0000H  2
  destination_address0 . . . . . . . .  MEMBER   -----  U_LONG   0002H  4
  destination_address1 . . . . . . . .  MEMBER   -----  U_LONG   0006H  4
  source_PAN_identifier. . . . . . . .  MEMBER   -----  U_INT    000AH  2
  source_address0. . . . . . . . . . .  MEMBER   -----  U_LONG   000CH  4
  source_address1. . . . . . . . . . .  MEMBER   -----  U_LONG   0010H  4
  command_frame_identifier . . . . . .  MEMBER   -----  U_CHAR   0014H  1
  disassociation_reason. . . . . . . .  MEMBER   -----  U_CHAR   0015H  1
U0CSR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0086H  1
LedsP__Led0__set . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
HalCC2430RadioP__CC_ADDR_RXNONCE . . .  E_CONST  -----  INT      -----  2
HplCC2430InterruptsC__InterruptRFErr__  STATIC   CODE   PROC     0000H  -----
  __nesc_atomic. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
CC2420_IOCFG1_CCAMUX . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_RXCTRL1_MED_LOWGAIN . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMERWDT_64 . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 86  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


CC2430_TIMER1_DIV_32 . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFSTATUS_SFD. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
uintptr_t. . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
LedsP__Led1__set . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
HalCC2430RadioP__cc2420_reg_t. . . . .  TYPEDEF  -----  U_CHAR   -----  1
cmd_beacon_request . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  5
  destination_PAN_identifier . . . . .  MEMBER   -----  U_INT    0000H  2
  destination_address. . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  command_frame_identifier . . . . . .  MEMBER   -----  U_CHAR   0004H  1
cmd_beacon_request . . . . . . . . . .  * TAG *  -----  STRUCT   -----  5
  destination_PAN_identifier . . . . .  MEMBER   -----  U_INT    0000H  2
  destination_address. . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  command_frame_identifier . . . . . .  MEMBER   -----  U_CHAR   0004H  1
CC2420_IOCFG0_FIFOP_THR. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMER1_MODE_FREE. . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_SLEEP_DIV . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
U0UCR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C4H  1
LedsP__Led2__set . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
HalCC2430RadioP__CC_ADDR_TXNONCE . . .  E_CONST  -----  INT      -----  2
PHY_IDLE . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SNOP. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_CLKCON_TICKSPD_MASK . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IRCON_DMAIF . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
StdOutM__buffer. . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    00B0H  1000
iee154_fcf_addr_mode_enums . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2420_RSSI. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
lldiv_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  quot . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  rem. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
HalCC2430RadioP____nesc_unnamed4280. .  * TAG *  -----  ENUM     -----  -----
PlatformP__LedsInit__init. . . . . . .  STATIC   CODE   PROC     0000H  -----
  __nesc_result. . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
CC2420_SECCTRL0. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_STATUS_ENC_BUSY . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_WDCTL_CLR . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
nxle_int8_t. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  1
  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1
HalCC2430RadioP____nesc_unnamed4290. .  * TAG *  -----  STRUCT   -----  2
  preamble_length. . . . . . . . . . .  MEMBER   -----  FIELD    0000H  4.0
  autoack. . . . . . . . . . . . . . .  MEMBER   -----  FIELD    0000H  1.4
  autocrc. . . . . . . . . . . . . . .  MEMBER   -----  FIELD    0000H  1.5
  cca_mode . . . . . . . . . . . . . .  MEMBER   -----  FIELD    0000H  2.6
  cca_hyst . . . . . . . . . . . . . .  MEMBER   -----  FIELD    0001H  3.0
  adr_decode . . . . . . . . . . . . .  MEMBER   -----  FIELD    0001H  1.3
  pan_coordinator. . . . . . . . . . .  MEMBER   -----  FIELD    0001H  1.4
  reserved_frame_mode. . . . . . . . .  MEMBER   -----  FIELD    0001H  1.5
  reserved . . . . . . . . . . . . . .  MEMBER   -----  FIELD    0001H  2.6
HalCC2430RadioP__preamble_length_t . .  TYPEDEF  -----  U_CHAR   -----  1
HalCC2430RadioP__CCA_HYST_0DB. . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP____nesc_unnamed4281. .  * TAG *  -----  ENUM     -----  -----
_SchedulerBasicP__pushTask . . . . . .  STATIC   CODE   PROC     0000H  -----
  id . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
CC2420_NONCE_FLAGS . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SECCTRL1. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RFIM_CSP_INT. . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CCA_HYST_1DB. . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_RESERVED . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 87  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


HalCC2430RadioP__CC_REG_TXCTRL . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP____nesc_unnamed4282. .  * TAG *  -----  ENUM     -----  -----
SchedulerBasicP__NUM_TASKS . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_FSMTC_TC_RXCHAIN2RX . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SECCTRL0_SEC_SAKEYSEL . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_DACTST. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_ADCTST. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
nx_bool. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  1
  nxdata . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1
__nesc_nxbase_nx_uint32_t. . . . . . .  TYPEDEF  -----  U_LONG   -----  4
HalCC2430RadioP__CCA_HYST_2DB. . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP____nesc_unnamed4283. .  * TAG *  -----  ENUM     -----  -----
RealMainP__Boot__booted. . . . . . . .  STATIC   CODE   PROC     0000H  -----
cc2420_battmon_enums . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2420_MAIN_DEMOD_RESETn . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_NONCE_FRAME_COUNTER . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_NONCE_BLOCK_COUNTER . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_FSTST0. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MDMCTRL0. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_IEN0_ADCIE. . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_HalCC2430SimpleUartP__uart0__get. . .  STATIC   CODE   PROC     0000H  -----
  _data. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
HalCC2430RadioP__transmitInProgress. .  PUBLIC   XDATA  U_CHAR   0498H  1
HalCC2430RadioP__CCA_HYST_3DB. . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP____nesc_unnamed4284. .  * TAG *  -----  ENUM     -----  -----
RealMainP__PlatformInit__init. . . . .  STATIC   CODE   PROC     0000H  -----
  __nesc_result. . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
ieee154_fcf_type_enums . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2420_FSTST1. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_MDMCTRL1. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T2CNF_OFCMPIF . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_T1CTL_OVFIF . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_nxbase_nx_uint16_t. . . . . . .  TYPEDEF  -----  U_INT    -----  2
HalCC2430RadioP__transmitPacketPtr . .  PUBLIC   XDATA  PTR      0499H  3
_HalCC2430RadioP__CC2430PALevelSet . .  STATIC   CODE   PROC     0000H  -----
  new_power. . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  power. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
HalCC2430RadioP__CCA_HYST_4DB. . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__CC_REG_STXONCCA . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP____nesc_unnamed4285. .  * TAG *  -----  ENUM     -----  -----
HalCC2430RadioP__Init__init. . . . . .  STATIC   CODE   PROC     0000H  -----
PHYTRANSMITPOWER . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_FSTST2. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SRFOFF. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
__nesc_disable_interrupt . . . . . . .  STATIC   CODE   PROC     0000H  -----
CC2430_RREG_DELAY_31 . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP__flushBufferTaskPosted  PUBLIC   XDATA  U_CHAR   049CH  1
HalCC2430RadioP__CCA_HYST_5DB. . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP____nesc_unnamed4286. .  * TAG *  -----  ENUM     -----  -----
HalCC2430RadioP__transmitTask. . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_IOCFG0_FIFOP_POLARITY . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_FSTST3. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TICKF_DIV_1 . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
intptr_t . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
uint_least32_t . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
HalCC2430RadioP__panid . . . . . . . .  PUBLIC   XDATA  U_INT    049DH  2
HalCC2430RadioP__CCA_HYST_6DB. . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 88  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


HalCC2430RadioP____nesc_unnamed4287. .  * TAG *  -----  ENUM     -----  -----
FCF_FT_ACK . . . . . . . . . . . . . .  E_CONST  -----  INT      -----  2
PHY_RX_ON. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
IEEE154_FCF_DEST_ADDR_MODE . . . . . .  E_CONST  -----  U_CHAR   -----  1
MAC_HEADER_SIZE. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TICKF_DIV_2 . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SLEEP. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BEH  1
ELAST. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HalCC2430RadioP____nesc_unnamed4288. .  * TAG *  -----  ENUM     -----  -----
HalCC2430RadioP__CCA_HYST_7DB. . . . .  E_CONST  -----  U_CHAR   -----  1
_HalCC2430RadioP__HALCC2420__receivedP  STATIC   CODE   PROC     0000H  -----
  packet . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
  __nesc_result. . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
RandomMlcgC__Init__init. . . . . . . .  STATIC   CODE   PROC     0000H  -----
packet . . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  128
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  fcf. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  _data_seq_no . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  dest . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  src. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  _data. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0008H  118
  fcs. . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   007EH  2
cc2420_syncword_enums. . . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2420_SRXDEC. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_SLEEP_HFRC_STB. . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
uint_least16_t . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
HalCC2430RadioP____nesc_unnamed4289. .  * TAG *  -----  ENUM     -----  -----
HalCC2430RadioP__CC_REG_FSMSTATE . . .  E_CONST  -----  U_CHAR   -----  1
PHY_TX_ON. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SFDMUX_XOSC16M_STABLE . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2420_SACKPEND. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_TIMERWDT_MODE_WDT . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cc2430_timerMAC_T2CNF_t. . . . . . . .  * TAG *  -----  ENUM     -----  -----
CC2430_TICKF_DIV_4 . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
uint32_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
SchedulerBasicP__m_head. . . . . . . .  PUBLIC   XDATA  U_CHAR   049FH  1
RealMainP__SoftwareInit__init. . . . .  STATIC   CODE   PROC     0000H  -----
  __nesc_result. . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
beacon_addr_short. . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  destination_PAN_identifier . . . . .  MEMBER   -----  U_INT    0000H  2
  destination_address. . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  source_address . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  superframe_specification . . . . . .  MEMBER   -----  U_INT    0006H  2
beacon_addr_short. . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  destination_PAN_identifier . . . . .  MEMBER   -----  U_INT    0000H  2
  destination_address. . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  source_address . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  superframe_specification . . . . . .  MEMBER   -----  U_INT    0006H  2
CC2420_TIME_VREN . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_WDCTL_INT . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CC2430_RREG_DELAY_63 . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3260    ----
   CONSTANT SIZE    =     89    ----
   XDATA SIZE       =   1184      47
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.00   APP                                                                   05/05/2013 02:08:25 PAGE 89  

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  10 WARNING(S),  0 ERROR(S)
